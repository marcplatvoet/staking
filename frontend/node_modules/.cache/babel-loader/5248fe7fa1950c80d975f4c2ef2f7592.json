{"ast":null,"code":"var _jsxFileName = \"/home/marc/EatTheBlocks/nft-royalties/frontend/src/pages/transfertokens.js\",\n    _s = $RefreshSig$();\n\n// Import the ethers library\nimport { React, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\nimport MyToken from \"../contracts/MyToken.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Transfertokens = ({\n  signerAddress,\n  mytoken,\n  currentAccount\n}) => {\n  _s();\n\n  const [balancefrom, setBalanceFrom] = useState(0);\n  const [balanceto, setBalanceTo] = useState(0);\n  const [balanceartist, setBalanceArtist] = useState(0);\n\n  const onTransferTokensWithoutRoyalties = async e => {\n    e.preventDefault();\n    const from = e.target.elements.from.value;\n    const to = e.target.elements.to.value;\n    const amount = e.target.elements.amount.value;\n    console.log(from);\n    console.log(to);\n    await mytoken.transfer(to, ethers.utils.parseUnits(amount));\n  };\n\n  const getBalances = async () => {\n    setBalanceFrom(await mytoken.balanceOf(from));\n    setBalanceTo(await mytoken.balanceOf(to));\n    const artist = await mytoken._artist();\n\n    if (artist !== \"0x0000000000000000000000000000000000000000\") {\n      setBalanceArtist(await mytoken.balanceOf(artist));\n    }\n  };\n\n  mytoken.on(\"Transfer\", (from, to, amount) => {\n    getBalances();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transfer tokens without royalties\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card col-sm-8 bg-secondary\",\n      children: [\"The token address: \", MyToken.address, \" is the token that we can transfer with or without royalties to the artist. The artist can be setup by the admin, and the percentage of royalties that the artist receives with every transaction.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-4  card col-sm-8 bg-secondary\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"Transfer Tokens Without Royalties.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => onTransferTokensWithoutRoyalties(e),\n          children: [\"From address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"readonly\",\n            name: \"from\",\n            className: \"form-control\",\n            placeholder: \"\",\n            value: currentAccount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), \"To address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"to\",\n            className: \"form-control\",\n            placeholder: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), \"Amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"amount\",\n            className: \"form-control\",\n            placeholder: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            children: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [`Balance sender:${ethers.utils.formatEther(balancefrom)}`, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [`Balance sender:${ethers.utils.formatEther(balanceto)}`, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [`Balance sender:${ethers.utils.formatEther(balanceartist)}`, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transfertokens, \"ventJoq9ROo/otsNnWg6meNcelg=\");\n\n_c = Transfertokens;\nexport default Transfertokens;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transfertokens\");","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/pages/transfertokens.js"],"names":["React","useState","ethers","MyToken","Transfertokens","signerAddress","mytoken","currentAccount","balancefrom","setBalanceFrom","balanceto","setBalanceTo","balanceartist","setBalanceArtist","onTransferTokensWithoutRoyalties","e","preventDefault","from","target","elements","value","to","amount","console","log","transfer","utils","parseUnits","getBalances","balanceOf","artist","_artist","on","address","formatEther"],"mappings":"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","sourcesContent":["// Import the ethers library\nimport { React, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst Transfertokens = ({ signerAddress, mytoken, currentAccount }) => {\n  const [balancefrom, setBalanceFrom] = useState(0);\n  const [balanceto, setBalanceTo] = useState(0);\n  const [balanceartist, setBalanceArtist] = useState(0);\n\n  const onTransferTokensWithoutRoyalties = async (e) => {\n    e.preventDefault();\n    const from = e.target.elements.from.value;\n    const to = e.target.elements.to.value;\n    const amount = e.target.elements.amount.value;\n    console.log(from);\n    console.log(to);\n    await mytoken.transfer(to, ethers.utils.parseUnits(amount));\n  };\n\n  const getBalances = async () => {\n    setBalanceFrom(await mytoken.balanceOf(from));\n    setBalanceTo(await mytoken.balanceOf(to));\n\n    const artist = await mytoken._artist();\n    if (artist !== \"0x0000000000000000000000000000000000000000\") {\n      setBalanceArtist(await mytoken.balanceOf(artist));\n    }\n  };\n\n  mytoken.on(\"Transfer\", (from, to, amount) => {\n    getBalances();\n  });\n\n  return (\n    <div>\n      <h1>Transfer tokens without royalties</h1>\n      <br />\n\n      <div className=\"card col-sm-8 bg-secondary\">\n        The token address: {MyToken.address} is the token that we can transfer\n        with or without royalties to the artist. The artist can be setup by the\n        admin, and the percentage of royalties that the artist receives with\n        every transaction.\n      </div>\n      <br />\n      <div className=\"col-4  card col-sm-8 bg-secondary\">\n        <div className=\"card-body\">\n          <div className=\"card-header\">Transfer Tokens Without Royalties.</div>\n          <form onSubmit={(e) => onTransferTokensWithoutRoyalties(e)}>\n            From address:\n            <input\n              type=\"readonly\"\n              name=\"from\"\n              className=\"form-control\"\n              placeholder=\"\"\n              value={currentAccount}\n            />\n            To address:\n            <input\n              type=\"text\"\n              name=\"to\"\n              className=\"form-control\"\n              placeholder=\"\"\n            />\n            Amount:\n            <input\n              type=\"text\"\n              name=\"amount\"\n              className=\"form-control\"\n              placeholder=\"\"\n            />\n            <br />\n            <button className=\"btn btn-primary\">submit</button>\n          </form>\n        </div>\n        <div>{`Balance sender:${ethers.utils.formatEther(balancefrom)}`} </div>\n        <div>{`Balance sender:${ethers.utils.formatEther(balanceto)}`} </div>\n        <div>\n          {`Balance sender:${ethers.utils.formatEther(balanceartist)}`}{\" \"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Transfertokens;\n"]},"metadata":{},"sourceType":"module"}