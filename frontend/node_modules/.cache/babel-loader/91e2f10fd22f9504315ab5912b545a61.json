{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport Token from \"../contracts/MockToken.json\";\nimport nftToken from \"../contracts/NFT.json\";\n\nconst getAmounts = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\"); // Prompt user for account connections\n\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  console.log(\"Account:\", await signer.getAddress());\n};\n\nconst getAmount = async (token, address) => {\n  const amountWei = await token.balanceOf(address);\n  const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n  console.log(`amount: ${amount}`);\n  return amount;\n};\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const token = new Contract(Token.address, Token.abi, signer);\n      const nfttoken = new Contract(nftToken.address, nftToken.abi, signer); // console.log(`token:${token.balanceOf(signerAddress)}`);\n      // console.log(`nfttoken:${nfttoken}`);\n\n      getAmounts(provider);\n      resolve({\n        signerAddress,\n        token,\n        nfttoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      token: undefined,\n      nfttoken: undefined\n    });\n  });\n});\n\nexport { getTokenBlockchain, getAmount };","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","web3","Token","nftToken","getAmounts","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","console","log","getAddress","getAmount","token","address","amountWei","balanceOf","amount","parseInt","utils","fromWei","toBN","getTokenBlockchain","Promise","resolve","reject","addEventListener","enable","signerAddress","abi","nfttoken","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,UAAU,GAAG,YAAY;AAC7B,QAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB,CAD6B,CAE7B;;AACA,QAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,QAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,MAAMH,MAAM,CAACI,UAAP,EAA9B;AACD,CAND;;AAQA,MAAMC,SAAS,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC1C,QAAMC,SAAS,GAAG,MAAMF,KAAK,CAACG,SAAN,CAAgBF,OAAhB,CAAxB;AACA,QAAMG,MAAM,GAAGC,QAAQ,CAACrB,IAAI,CAACsB,KAAL,CAAWC,OAAX,CAAmBvB,IAAI,CAACsB,KAAL,CAAWE,IAAX,CAAgBN,SAAhB,CAAnB,CAAD,CAAvB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAa,WAAUO,MAAO,EAA9B;AACA,SAAOA,MAAP;AACD,CALD;;AAOA,MAAMK,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BrB,EAAAA,MAAM,CAACsB,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CjB,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBN,MAAM,CAACC,QAAS,EAAhD;;AACA,QAAID,MAAM,CAACC,QAAX,EAAqB;AACnB,YAAMD,MAAM,CAACC,QAAP,CAAgBsB,MAAhB,EAAN;AACA,YAAM1B,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAME,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMoB,aAAa,GAAG,MAAMrB,MAAM,CAACI,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAME,KAAK,GAAG,IAAIjB,QAAJ,CAAaE,KAAK,CAACgB,OAAnB,EAA4BhB,KAAK,CAAC+B,GAAlC,EAAuCtB,MAAvC,CAAd;AACA,YAAMuB,QAAQ,GAAG,IAAIlC,QAAJ,CAAaG,QAAQ,CAACe,OAAtB,EAA+Bf,QAAQ,CAAC8B,GAAxC,EAA6CtB,MAA7C,CAAjB,CATmB,CAUnB;AACA;;AAEAP,MAAAA,UAAU,CAACC,QAAD,CAAV;AAEAuB,MAAAA,OAAO,CAAC;AAAEI,QAAAA,aAAF;AAAiBf,QAAAA,KAAjB;AAAwBiB,QAAAA;AAAxB,OAAD,CAAP;AACD;;AACDN,IAAAA,OAAO,CAAC;AACNI,MAAAA,aAAa,EAAEG,SADT;AAENlB,MAAAA,KAAK,EAAEkB,SAFD;AAGND,MAAAA,QAAQ,EAAEC;AAHJ,KAAD,CAAP;AAKD,GAxBD;AAyBD,CA1BD,CADF;;AA6BA,SAAST,kBAAT,EAA6BV,SAA7B","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport Token from \"../contracts/MockToken.json\";\nimport nftToken from \"../contracts/NFT.json\";\n\nconst getAmounts = async () => {\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  // Prompt user for account connections\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  console.log(\"Account:\", await signer.getAddress());\n};\n\nconst getAmount = async (token, address) => {\n  const amountWei = await token.balanceOf(address);\n  const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n  console.log(`amount: ${amount}`);\n  return amount;\n};\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const token = new Contract(Token.address, Token.abi, signer);\n        const nfttoken = new Contract(nftToken.address, nftToken.abi, signer);\n        // console.log(`token:${token.balanceOf(signerAddress)}`);\n        // console.log(`nfttoken:${nfttoken}`);\n\n        getAmounts(provider);\n\n        resolve({ signerAddress, token, nfttoken });\n      }\n      resolve({\n        signerAddress: undefined,\n        token: undefined,\n        nfttoken: undefined,\n      });\n    });\n  });\n\nexport { getTokenBlockchain, getAmount };\n"]},"metadata":{},"sourceType":"module"}