{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport Web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst getBalance = async (token, account) => {// const balance = await token.balanceOf(account);\n  // return ethers.utils.formatEther(balance);\n};\n\nconst getWeb3 = async () => {\n  // Init\n  const web3Provider = new Web3.providers.HttpProvider(\"http://localhost:8545\");\n  const web3 = new Web3(web3Provider);\n  console.log(web3);\n  let accounts = await web3.eth.getAccounts();\n  console.log(accounts);\n  let contract = new web3.eth.Contract(MyToken.abi, MyToken.address);\n  console.log(MyToken.address);\n  let artist = await contract.methods.getAdmin();\n  console.log(artist);\n  web3.eth.defaultAccount = accounts[0];\n  var result = contract.methods.admin.call().call((error, result) => {\n    console.log(result);\n  });\n  console.log(result);\n  console.log(contract.admin()); //const Web3 = require(\"web3\");\n\n  console.log(\"Web3.eth = \" + web3.eth);\n  console.log(\"Web3.utils = \" + web3.utils);\n  console.log(\"Web3.bzz = \" + web3.bzz);\n  console.log(\"Web3.shh = \" + web3.shh); // var owner = contract.owner.call();\n  // console.log(owner);\n  // let result = contract.methods.admin.call((error, result) => {\n  //   console.log(result);\n  // });\n  // console.log(result);\n};\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const mytoken = new Contract(MyToken.address, MyToken.abi, signer); //const balance = getBalance(mytoken, signerAddress);\n\n      const balance = await mytoken.balanceOf(signerAddress); //console.log(balance);\n\n      console.log(ethers.utils.formatEther(balance)); //const contract = instance();\n\n      const artist = await mytoken.admin(); //getWeb3();\n      // const contract_fac = await mytoken._artist();\n      // console.log(contract_fac);\n      // const artist = getArtist(mytoken);\n      // console.log(artist);\n      // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n      resolve({\n        signerAddress,\n        mytoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      mytoken: undefined\n    });\n  });\n});\n\nexport { getTokenBlockchain, getBalance };","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","Web3","MyToken","getBalance","token","account","getWeb3","web3Provider","providers","HttpProvider","web3","console","log","accounts","eth","getAccounts","contract","abi","address","artist","methods","getAdmin","defaultAccount","result","admin","call","error","utils","bzz","shh","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","Web3Provider","signer","getSigner","signerAddress","getAddress","mytoken","balance","balanceOf","formatEther","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,UAAU,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B,CAC3C;AACA;AACD,CAHD;;AAKA,MAAMC,OAAO,GAAG,YAAY;AAC1B;AACA,QAAMC,YAAY,GAAG,IAAIN,IAAI,CAACO,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAArB;AACA,QAAMC,IAAI,GAAG,IAAIT,IAAJ,CAASM,YAAT,CAAb;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,MAAIG,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAL,CAASC,WAAT,EAArB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,MAAIG,QAAQ,GAAG,IAAIN,IAAI,CAACI,GAAL,CAASd,QAAb,CAAsBE,OAAO,CAACe,GAA9B,EAAmCf,OAAO,CAACgB,OAA3C,CAAf;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAO,CAACgB,OAApB;AACA,MAAIC,MAAM,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiBC,QAAjB,EAAnB;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AACAT,EAAAA,IAAI,CAACI,GAAL,CAASQ,cAAT,GAA0BT,QAAQ,CAAC,CAAD,CAAlC;AAEA,MAAIU,MAAM,GAAGP,QAAQ,CAACI,OAAT,CAAiBI,KAAjB,CAAuBC,IAAvB,GAA8BA,IAA9B,CAAmC,CAACC,KAAD,EAAQH,MAAR,KAAmB;AACjEZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,MAAZ;AACD,GAFY,CAAb;AAGAZ,EAAAA,OAAO,CAACC,GAAR,CAAYW,MAAZ;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACQ,KAAT,EAAZ,EAjB0B,CAmB1B;;AACAb,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,IAAI,CAACI,GAAjC;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBF,IAAI,CAACiB,KAAnC;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,IAAI,CAACkB,GAAjC;AACAjB,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,IAAI,CAACmB,GAAjC,EAvB0B,CAyB1B;AACA;AAEA;AACA;AACA;AACA;AACD,CAhCD;;AAkCA,MAAMC,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CxB,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBsB,MAAM,CAACE,QAAS,EAAhD;;AACA,QAAIF,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIvC,MAAM,CAACS,SAAP,CAAiB+B,YAArB,CAAkCL,MAAM,CAACE,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAMI,MAAM,GAAGF,QAAQ,CAACG,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAMC,OAAO,GAAG,IAAI5C,QAAJ,CAAaE,OAAO,CAACgB,OAArB,EAA8BhB,OAAO,CAACe,GAAtC,EAA2CuB,MAA3C,CAAhB,CARmB,CASnB;;AACA,YAAMK,OAAO,GAAG,MAAMD,OAAO,CAACE,SAAR,CAAkBJ,aAAlB,CAAtB,CAVmB,CAWnB;;AACA/B,MAAAA,OAAO,CAACC,GAAR,CAAYb,MAAM,CAAC4B,KAAP,CAAaoB,WAAb,CAAyBF,OAAzB,CAAZ,EAZmB,CAcnB;;AAEA,YAAM1B,MAAM,GAAG,MAAMyB,OAAO,CAACpB,KAAR,EAArB,CAhBmB,CAiBnB;AACA;AACA;AACA;AACA;AACA;;AAEAQ,MAAAA,OAAO,CAAC;AAAEU,QAAAA,aAAF;AAAiBE,QAAAA;AAAjB,OAAD,CAAP;AACD;;AACDZ,IAAAA,OAAO,CAAC;AACNU,MAAAA,aAAa,EAAEM,SADT;AAENJ,MAAAA,OAAO,EAAEI;AAFH,KAAD,CAAP;AAID,GAhCD;AAiCD,CAlCD,CADF;;AAqCA,SAASlB,kBAAT,EAA6B3B,UAA7B","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport Web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst getBalance = async (token, account) => {\n  // const balance = await token.balanceOf(account);\n  // return ethers.utils.formatEther(balance);\n};\n\nconst getWeb3 = async () => {\n  // Init\n  const web3Provider = new Web3.providers.HttpProvider(\"http://localhost:8545\");\n  const web3 = new Web3(web3Provider);\n  console.log(web3);\n  let accounts = await web3.eth.getAccounts();\n  console.log(accounts);\n  let contract = new web3.eth.Contract(MyToken.abi, MyToken.address);\n  console.log(MyToken.address);\n  let artist = await contract.methods.getAdmin();\n  console.log(artist);\n  web3.eth.defaultAccount = accounts[0];\n\n  var result = contract.methods.admin.call().call((error, result) => {\n    console.log(result);\n  });\n  console.log(result);\n  console.log(contract.admin());\n\n  //const Web3 = require(\"web3\");\n  console.log(\"Web3.eth = \" + web3.eth);\n  console.log(\"Web3.utils = \" + web3.utils);\n  console.log(\"Web3.bzz = \" + web3.bzz);\n  console.log(\"Web3.shh = \" + web3.shh);\n\n  // var owner = contract.owner.call();\n  // console.log(owner);\n\n  // let result = contract.methods.admin.call((error, result) => {\n  //   console.log(result);\n  // });\n  // console.log(result);\n};\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const mytoken = new Contract(MyToken.address, MyToken.abi, signer);\n        //const balance = getBalance(mytoken, signerAddress);\n        const balance = await mytoken.balanceOf(signerAddress);\n        //console.log(balance);\n        console.log(ethers.utils.formatEther(balance));\n\n        //const contract = instance();\n\n        const artist = await mytoken.admin();\n        //getWeb3();\n        // const contract_fac = await mytoken._artist();\n        // console.log(contract_fac);\n        // const artist = getArtist(mytoken);\n        // console.log(artist);\n        // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n        resolve({ signerAddress, mytoken });\n      }\n      resolve({\n        signerAddress: undefined,\n        mytoken: undefined,\n      });\n    });\n  });\n\nexport { getTokenBlockchain, getBalance };\n"]},"metadata":{},"sourceType":"module"}