{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport Token from \"../contracts/MockToken.json\";\nimport nftToken from \"../contracts/NFT.json\";\n\nconst getAmount = async (token, address) => {\n  const amountWei = await token.balanceOf(address);\n  const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n  console.log(`amount: ${amount}`);\n  return amount;\n};\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log(`provider: ${provider}`);\n      const signer = provider.getSigner();\n      console.log(`signer:${signer}`);\n      const signerAddress = await signer.getAddress();\n      console.log(`signerAddress:${signerAddress}`);\n      const token = new Contract(Token.address, Token.abi, signer);\n      const nfttoken = new Contract(nftToken.address, nftToken.abi, signer);\n      console.log(`token:${token.balanceOf(signerAddress)}`);\n      console.log(`nfttoken:${nfttoken}`);\n      resolve({\n        signerAddress,\n        token,\n        nfttoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      token: undefined,\n      nfttoken: undefined\n    });\n  });\n});\n\nexport { getTokenBlockchain, getAmount };","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","web3","Token","nftToken","getAmount","token","address","amountWei","balanceOf","amount","parseInt","utils","fromWei","toBN","console","log","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","abi","nfttoken","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,SAAS,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC1C,QAAMC,SAAS,GAAG,MAAMF,KAAK,CAACG,SAAN,CAAgBF,OAAhB,CAAxB;AACA,QAAMG,MAAM,GAAGC,QAAQ,CAACT,IAAI,CAACU,KAAL,CAAWC,OAAX,CAAmBX,IAAI,CAACU,KAAL,CAAWE,IAAX,CAAgBN,SAAhB,CAAnB,CAAD,CAAvB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAa,WAAUN,MAAO,EAA9B;AACA,SAAOA,MAAP;AACD,CALD;;AAOA,MAAMO,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CP,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBK,MAAM,CAACE,QAAS,EAAhD;;AACA,QAAIF,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIzB,MAAM,CAAC0B,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAa,aAAYS,QAAS,EAAlC;AACA,YAAMG,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASY,MAAO,EAA7B;AACA,YAAME,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBc,aAAc,EAA3C;AACA,YAAMxB,KAAK,GAAG,IAAIL,QAAJ,CAAaE,KAAK,CAACI,OAAnB,EAA4BJ,KAAK,CAAC6B,GAAlC,EAAuCJ,MAAvC,CAAd;AACA,YAAMK,QAAQ,GAAG,IAAIhC,QAAJ,CAAaG,QAAQ,CAACG,OAAtB,EAA+BH,QAAQ,CAAC4B,GAAxC,EAA6CJ,MAA7C,CAAjB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAQV,KAAK,CAACG,SAAN,CAAgBqB,aAAhB,CAA+B,EAApD;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAWiB,QAAS,EAAjC;AACAd,MAAAA,OAAO,CAAC;AAAEW,QAAAA,aAAF;AAAiBxB,QAAAA,KAAjB;AAAwB2B,QAAAA;AAAxB,OAAD,CAAP;AACD;;AACDd,IAAAA,OAAO,CAAC;AACNW,MAAAA,aAAa,EAAEI,SADT;AAEN5B,MAAAA,KAAK,EAAE4B,SAFD;AAGND,MAAAA,QAAQ,EAAEC;AAHJ,KAAD,CAAP;AAKD,GArBD;AAsBD,CAvBD,CADF;;AA0BA,SAASjB,kBAAT,EAA6BZ,SAA7B","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport Token from \"../contracts/MockToken.json\";\nimport nftToken from \"../contracts/NFT.json\";\n\nconst getAmount = async (token, address) => {\n  const amountWei = await token.balanceOf(address);\n  const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n  console.log(`amount: ${amount}`);\n  return amount;\n};\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        console.log(`signerAddress:${signerAddress}`);\n        const token = new Contract(Token.address, Token.abi, signer);\n        const nfttoken = new Contract(nftToken.address, nftToken.abi, signer);\n        console.log(`token:${token.balanceOf(signerAddress)}`);\n        console.log(`nfttoken:${nfttoken}`);\n        resolve({ signerAddress, token, nfttoken });\n      }\n      resolve({\n        signerAddress: undefined,\n        token: undefined,\n        nfttoken: undefined,\n      });\n    });\n  });\n\nexport { getTokenBlockchain, getAmount };\n"]},"metadata":{},"sourceType":"module"}