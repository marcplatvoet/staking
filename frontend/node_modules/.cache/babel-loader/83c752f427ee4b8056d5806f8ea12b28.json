{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport { React, useState } from \"react\"; //import Web3 from \"web3\";\n\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst getBalance = async (token, account) => {\n  const balance = await token.balanceOf(account);\n  return ethers.utils.formatEther(balance);\n};\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const mytoken = new Contract(MyToken.address, MyToken.abi, signer); //const balance = getBalance(mytoken, signerAddress);\n\n      const balance = await mytoken.balanceOf(signerAddress); //console.log(balance);\n\n      console.log(ethers.utils.formatEther(balance)); //const contract = instance();\n\n      let artist = await mytoken._artist();\n      const percentage = ethers.utils.formatEther(await mytoken._percentage());\n      const admin = await mytoken.admin();\n\n      if (artist === \"0x0000000000000000000000000000000000000000\") {\n        artist = null;\n      }\n\n      console.log(artist);\n      console.log(percentage);\n      console.log(admin);\n      resolve({\n        signerAddress,\n        mytoken,\n        addresses: [artist, percentage, admin]\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      mytoken: undefined,\n      addresses: []\n    });\n  });\n});\n\nexport { getTokenBlockchain, getBalance };","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","React","useState","MyToken","getBalance","token","account","balance","balanceOf","utils","formatEther","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","console","log","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","mytoken","address","abi","artist","_artist","percentage","_percentage","admin","addresses","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,UAAU,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC3C,QAAMC,OAAO,GAAG,MAAMF,KAAK,CAACG,SAAN,CAAgBF,OAAhB,CAAtB;AACA,SAAOP,MAAM,CAACU,KAAP,CAAaC,WAAb,CAAyBH,OAAzB,CAAP;AACD,CAHD;;AAKA,MAAMI,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBH,MAAM,CAACI,QAAS,EAAhD;;AACA,QAAIJ,MAAM,CAACI,QAAX,EAAqB;AACnB,YAAMJ,MAAM,CAACI,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAItB,MAAM,CAACuB,SAAP,CAAiBC,YAArB,CAAkCR,MAAM,CAACI,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAMC,OAAO,GAAG,IAAI5B,QAAJ,CAAaG,OAAO,CAAC0B,OAArB,EAA8B1B,OAAO,CAAC2B,GAAtC,EAA2CN,MAA3C,CAAhB,CARmB,CASnB;;AACA,YAAMjB,OAAO,GAAG,MAAMqB,OAAO,CAACpB,SAAR,CAAkBkB,aAAlB,CAAtB,CAVmB,CAWnB;;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAM,CAACU,KAAP,CAAaC,WAAb,CAAyBH,OAAzB,CAAZ,EAZmB,CAcnB;;AAEA,UAAIwB,MAAM,GAAG,MAAMH,OAAO,CAACI,OAAR,EAAnB;AAEA,YAAMC,UAAU,GAAGlC,MAAM,CAACU,KAAP,CAAaC,WAAb,CACjB,MAAMkB,OAAO,CAACM,WAAR,EADW,CAAnB;AAIA,YAAMC,KAAK,GAAG,MAAMP,OAAO,CAACO,KAAR,EAApB;;AAEA,UAAIJ,MAAM,KAAK,4CAAf,EAA6D;AAC3DA,QAAAA,MAAM,GAAG,IAAT;AACD;;AAEDd,MAAAA,OAAO,CAACC,GAAR,CAAYa,MAAZ;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAYe,UAAZ;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AAEAtB,MAAAA,OAAO,CAAC;AACNa,QAAAA,aADM;AAENE,QAAAA,OAFM;AAGNQ,QAAAA,SAAS,EAAE,CAACL,MAAD,EAASE,UAAT,EAAqBE,KAArB;AAHL,OAAD,CAAP;AAKD;;AACDtB,IAAAA,OAAO,CAAC;AACNa,MAAAA,aAAa,EAAEW,SADT;AAENT,MAAAA,OAAO,EAAES,SAFH;AAGND,MAAAA,SAAS,EAAE;AAHL,KAAD,CAAP;AAKD,GA7CD;AA8CD,CA/CD,CADF;;AAkDA,SAASzB,kBAAT,EAA6BP,UAA7B","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport { React, useState } from \"react\";\n//import Web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst getBalance = async (token, account) => {\n  const balance = await token.balanceOf(account);\n  return ethers.utils.formatEther(balance);\n};\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const mytoken = new Contract(MyToken.address, MyToken.abi, signer);\n        //const balance = getBalance(mytoken, signerAddress);\n        const balance = await mytoken.balanceOf(signerAddress);\n        //console.log(balance);\n        console.log(ethers.utils.formatEther(balance));\n\n        //const contract = instance();\n\n        let artist = await mytoken._artist();\n\n        const percentage = ethers.utils.formatEther(\n          await mytoken._percentage()\n        );\n\n        const admin = await mytoken.admin();\n\n        if (artist === \"0x0000000000000000000000000000000000000000\") {\n          artist = null;\n        }\n\n        console.log(artist);\n        console.log(percentage);\n        console.log(admin);\n\n        resolve({\n          signerAddress,\n          mytoken,\n          addresses: [artist, percentage, admin],\n        });\n      }\n      resolve({\n        signerAddress: undefined,\n        mytoken: undefined,\n        addresses: [],\n      });\n    });\n  });\n\nexport { getTokenBlockchain, getBalance };\n"]},"metadata":{},"sourceType":"module"}