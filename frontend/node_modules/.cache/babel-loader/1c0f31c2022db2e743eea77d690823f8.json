{"ast":null,"code":"var _jsxFileName = \"/home/marc/EatTheBlocks/nft-royalties/frontend/src/pages/mint.js\",\n    _s = $RefreshSig$();\n\n// Import the ethers library\nimport { React, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\nimport MyToken from \"../contracts/MyToken.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Mint = ({\n  signerAddress,\n  mytoken,\n  currentAccount,\n  addMessage\n}) => {\n  _s();\n\n  const [balancefrom, setBalanceFrom] = useState(0);\n  const [balanceto, setBalanceTo] = useState(0);\n  const [balanceartist, setBalanceArtist] = useState(0);\n\n  const onMint = async e => {\n    try {\n      e.preventDefault();\n      const amount = e.target.elements.amount.value;\n      await mytoken.mint(ethers.utils.parseUnits(amount));\n    } catch (oE) {\n      const message = [{\n        head: \"Error!\",\n        body: oE.message,\n        variant: \"error\"\n      }];\n      addMessage(message);\n    }\n  };\n\n  const getBalances = async (from, to) => {\n    setBalanceFrom(await mytoken.balanceOf(from));\n    setBalanceTo(await mytoken.balanceOf(to));\n    const artist = await mytoken._artist();\n\n    if (artist !== \"0x0000000000000000000000000000000000000000\") {\n      setBalanceArtist(await mytoken.balanceOf(artist));\n    }\n\n    const message = [{\n      head: \"transfer complete.\",\n      body: \"The transfer of the tokens is complete!\",\n      variant: \"info\"\n    }];\n    addMessage(message);\n  };\n\n  mytoken.on(\"Transfer\", (from, to, amount) => {\n    getBalances(from, to);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transfer tokens without royalties\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card col-sm-8 bg-secondary\",\n      children: [\"The token address: \", MyToken.address, \" is the token that we can transfer with or without royalties to the artist. The artist can be setup by the admin, and the percentage of royalties that the artist receives with every transaction.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [`Balance sender: ${ethers.utils.formatEther(balancefrom)}`, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [`Balance receiver: ${ethers.utils.formatEther(balanceto)}`, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: `Balance artist: ${ethers.utils.formatEther(balanceartist)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-6  card col-sm-8 bg-secondary\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header\",\n            children: \"Get tokens to your account for testing.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => onMint(e),\n            children: [\"To address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"to\",\n              className: \"form-control\",\n              placeholder: \"\",\n              value: signerAddress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), \"Amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"readonly\",\n              name: \"amount\",\n              className: \"form-control\",\n              placeholder: \"\",\n              value: \"1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              children: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Mint, \"ventJoq9ROo/otsNnWg6meNcelg=\");\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/pages/mint.js"],"names":["React","useState","ethers","MyToken","Mint","signerAddress","mytoken","currentAccount","addMessage","balancefrom","setBalanceFrom","balanceto","setBalanceTo","balanceartist","setBalanceArtist","onMint","e","preventDefault","amount","target","elements","value","mint","utils","parseUnits","oE","message","head","body","variant","getBalances","from","to","balanceOf","artist","_artist","on","address","formatEther"],"mappings":"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","sourcesContent":["// Import the ethers library\nimport { React, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap-grid.css\";\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst Mint = ({ signerAddress, mytoken, currentAccount, addMessage }) => {\n  const [balancefrom, setBalanceFrom] = useState(0);\n  const [balanceto, setBalanceTo] = useState(0);\n  const [balanceartist, setBalanceArtist] = useState(0);\n\n  const onMint = async (e) => {\n    try {\n      e.preventDefault();\n      const amount = e.target.elements.amount.value;\n      await mytoken.mint(ethers.utils.parseUnits(amount));\n    } catch (oE) {\n      const message = [\n        {\n          head: \"Error!\",\n          body: oE.message,\n          variant: \"error\",\n        },\n      ];\n      addMessage(message);\n    }\n  };\n\n  const getBalances = async (from, to) => {\n    setBalanceFrom(await mytoken.balanceOf(from));\n    setBalanceTo(await mytoken.balanceOf(to));\n\n    const artist = await mytoken._artist();\n    if (artist !== \"0x0000000000000000000000000000000000000000\") {\n      setBalanceArtist(await mytoken.balanceOf(artist));\n    }\n\n    const message = [\n      {\n        head: \"transfer complete.\",\n        body: \"The transfer of the tokens is complete!\",\n        variant: \"info\",\n      },\n    ];\n    addMessage(message);\n  };\n\n  mytoken.on(\"Transfer\", (from, to, amount) => {\n    getBalances(from, to);\n  });\n\n  return (\n    <div>\n      <h1>Transfer tokens without royalties</h1>\n      <br />\n\n      <div className=\"card col-sm-8 bg-secondary\">\n        The token address: {MyToken.address} is the token that we can transfer\n        with or without royalties to the artist. The artist can be setup by the\n        admin, and the percentage of royalties that the artist receives with\n        every transaction.\n      </div>\n      <br />\n      <div>{`Balance sender: ${ethers.utils.formatEther(balancefrom)}`} </div>\n      <div>{`Balance receiver: ${ethers.utils.formatEther(balanceto)}`} </div>\n      <div>{`Balance artist: ${ethers.utils.formatEther(balanceartist)}`}</div>\n      <br />\n\n      <div className=\"row\">\n        <div className=\"col-lg-6  card col-sm-8 bg-secondary\">\n          <div className=\"card-body\">\n            <div className=\"card-header\">\n              Get tokens to your account for testing.\n            </div>\n            <form onSubmit={(e) => onMint(e)}>\n              To address:\n              <input\n                type=\"text\"\n                name=\"to\"\n                className=\"form-control\"\n                placeholder=\"\"\n                value={signerAddress}\n              />\n              Amount:\n              <input\n                type=\"readonly\"\n                name=\"amount\"\n                className=\"form-control\"\n                placeholder=\"\"\n                value=\"1\"\n              />\n              <br />\n              <button className=\"btn btn-primary\">submit</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Mint;\n"]},"metadata":{},"sourceType":"module"}