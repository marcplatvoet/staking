{"ast":null,"code":"import { ethers, Contract } from 'ethers';\nimport Token from '../contracts/MockToken.json';\nimport NFT from '../contracts/NFT.json';\n\nconst getBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener('load', async () => {\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log(provider);\n      const signer = provider.getSigner();\n      console.log(signer);\n      const signerAddress = await signer.getAddress();\n      console.log(signerAddress);\n      const token = new Contract(Token.address, Token.abi, signer);\n      resolve({\n        signerAddress,\n        token\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      token: undefined\n    });\n  });\n});\n\nexport default getBlockchain;","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/connectButton/src/components/ethereum.js"],"names":["ethers","Contract","Token","NFT","getBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","console","log","signer","getSigner","signerAddress","getAddress","token","address","abi","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;;AAEA,MAAMC,aAAa,GAAG,MACpB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C,QAAGD,MAAM,CAACE,QAAV,EAAoB;AAClB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,YAAMK,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,YAAME,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYG,aAAZ;AACA,YAAME,KAAK,GAAG,IAAIpB,QAAJ,CACZC,KAAK,CAACoB,OADM,EAEZpB,KAAK,CAACqB,GAFM,EAGZN,MAHY,CAAd;AAMAX,MAAAA,OAAO,CAAC;AAACa,QAAAA,aAAD;AAAgBE,QAAAA;AAAhB,OAAD,CAAP;AACD;;AACDf,IAAAA,OAAO,CAAC;AAACa,MAAAA,aAAa,EAAEK,SAAhB;AAA2BH,MAAAA,KAAK,EAAEG;AAAlC,KAAD,CAAP;AACD,GAlBD;AAmBD,CApBD,CADF;;AAuBA,eAAepB,aAAf","sourcesContent":["import { ethers, Contract } from 'ethers';\nimport Token from '../contracts/MockToken.json';\nimport NFT from '../contracts/NFT.json';\n\nconst getBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener('load', async () => {\n      if(window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        console.log(provider);\n        const signer = provider.getSigner();\n        console.log(signer);\n        const signerAddress = await signer.getAddress();\n        console.log(signerAddress);\n        const token = new Contract(\n          Token.address,\n          Token.abi,\n          signer\n        );\n\n        resolve({signerAddress, token});\n      }\n      resolve({signerAddress: undefined, token: undefined});\n    });\n  });\n\nexport default getBlockchain;\n"]},"metadata":{},"sourceType":"module"}