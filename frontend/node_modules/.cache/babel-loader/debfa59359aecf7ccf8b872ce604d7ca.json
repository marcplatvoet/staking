{"ast":null,"code":"var _jsxFileName = \"/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/loginbutton.js\",\n    _s = $RefreshSig$();\n\n//import logo from \"../logo.svg\";\nimport { React, useState } from \"react\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport Chain from \"../components/chain\";\nimport { Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginButton = ({\n  setMessage,\n  currentAccount,\n  currentChainID\n}) => {\n  _s();\n\n  //const [message, setMessage] = useState([]);\n  const [isLogged, setIsLogged] = useState(false);\n  const [currentaccount, setCurrentAccount] = useState(0);\n  const [currentchainid, setCurrentChainID] = useState(0);\n\n  const SignIn = async () => {\n    //Detect Provider\n    const provider = await detectEthereumProvider(); //const web3 = new Web3(provider)\n\n    if (!provider) {\n      setMessage([{\n        head: \"Wallet not found\",\n        body: `Please install MetaMask!`,\n        variant: \"warning\"\n      }]);\n    } else {\n      const address = await ConnectWallet();\n      if (address) setMessage([{\n        head: \"User Login\",\n        body: `addres: ${address}`,\n        variant: \"success\"\n      }]);\n    }\n  };\n\n  const ConnectWallet = async () => {\n    console.log(\"Try Connect\");\n\n    try {\n      await window.ethereum.enable();\n      const id = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      setCurrentChainID(() => parseInt(id, 16));\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setIsLogged(true);\n      setCurrentAccount(accounts[0]);\n      console.log(accounts);\n      return accounts[0];\n    } catch (err) {\n      if (err.code === 4001) {\n        // EIP-1193 userRejectedRequest error\n        // If this happens, the user rejected the connection request.\n        console.log(\"Please connect to MetaMask.\");\n        setMessage([{\n          head: \"User Rejected Request\",\n          body: \"Please connect to MetaMask.\",\n          variant: \"info\"\n        }]);\n      } else if (err.code === -32002) {\n        console.log(\"Please unlock MetaMask.\");\n        setMessage([{\n          head: \"User Request Pending\",\n          body: \"Please unlock MetaMask and try agin.\",\n          variant: \"info\"\n        }]);\n      } else {\n        console.error(err);\n        setMessage([{\n          head: \"Error\",\n          body: err.message,\n          variant: \"info\"\n        }]);\n      }\n    }\n  };\n\n  const SignOut = async () => {\n    setIsLogged(false);\n    setCurrentAccount(\"\");\n  };\n\n  const shortAddr = () => {\n    return `${currentAccount.substr(0, 4)}...${currentAccount.substring(currentAccount.length - 4, currentAccount.length)}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chain, {\n      chainId: currentChainID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n      className: isLogged ? \"connect-button btn-primary\" : \"btn-success\",\n      onClick: isLogged ? SignOut : SignIn,\n      variant: \"primary\",\n      children: isLogged ? shortAddr(currentAccount) : \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginButton, \"PVjp6Ob2llgThxc/QzVVcpXEVdw=\");\n\n_c = LoginButton;\nexport default LoginButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginButton\");","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/loginbutton.js"],"names":["React","useState","detectEthereumProvider","Chain","Button","LoginButton","setMessage","currentAccount","currentChainID","isLogged","setIsLogged","currentaccount","setCurrentAccount","currentchainid","setCurrentChainID","SignIn","provider","head","body","variant","address","ConnectWallet","console","log","window","ethereum","enable","id","request","method","parseInt","accounts","err","code","error","message","SignOut","shortAddr","substr","substring","length"],"mappings":"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","sourcesContent":["//import logo from \"../logo.svg\";\nimport { React, useState } from \"react\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport Chain from \"../components/chain\";\n\nimport { Button } from \"react-bootstrap\";\n\nconst LoginButton = ({ setMessage, currentAccount, currentChainID }) => {\n  //const [message, setMessage] = useState([]);\n  const [isLogged, setIsLogged] = useState(false);\n  const [currentaccount, setCurrentAccount] = useState(0);\n  const [currentchainid, setCurrentChainID] = useState(0);\n\n  const SignIn = async () => {\n    //Detect Provider\n    const provider = await detectEthereumProvider();\n    //const web3 = new Web3(provider)\n\n    if (!provider) {\n      setMessage([\n        {\n          head: \"Wallet not found\",\n          body: `Please install MetaMask!`,\n          variant: \"warning\",\n        },\n      ]);\n    } else {\n      const address = await ConnectWallet();\n      if (address)\n        setMessage([\n          {\n            head: \"User Login\",\n            body: `addres: ${address}`,\n            variant: \"success\",\n          },\n        ]);\n    }\n  };\n\n  const ConnectWallet = async () => {\n    console.log(\"Try Connect\");\n\n    try {\n      await window.ethereum.enable();\n\n      const id = await window.ethereum.request({ method: \"eth_chainId\" });\n      setCurrentChainID(() => parseInt(id, 16));\n\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setIsLogged(true);\n      setCurrentAccount(accounts[0]);\n\n      console.log(accounts);\n      return accounts[0];\n    } catch (err) {\n      if (err.code === 4001) {\n        // EIP-1193 userRejectedRequest error\n        // If this happens, the user rejected the connection request.\n        console.log(\"Please connect to MetaMask.\");\n        setMessage([\n          {\n            head: \"User Rejected Request\",\n            body: \"Please connect to MetaMask.\",\n            variant: \"info\",\n          },\n        ]);\n      } else if (err.code === -32002) {\n        console.log(\"Please unlock MetaMask.\");\n        setMessage([\n          {\n            head: \"User Request Pending\",\n            body: \"Please unlock MetaMask and try agin.\",\n            variant: \"info\",\n          },\n        ]);\n      } else {\n        console.error(err);\n        setMessage([{ head: \"Error\", body: err.message, variant: \"info\" }]);\n      }\n    }\n  };\n\n  const SignOut = async () => {\n    setIsLogged(false);\n    setCurrentAccount(\"\");\n  };\n\n  const shortAddr = () => {\n    return `${currentAccount.substr(0, 4)}...${currentAccount.substring(\n      currentAccount.length - 4,\n      currentAccount.length\n    )}`;\n  };\n\n  return (\n    <div>\n      <Chain chainId={currentChainID} />{\" \"}\n      <Button\n        className={isLogged ? \"connect-button btn-primary\" : \"btn-success\"}\n        onClick={isLogged ? SignOut : SignIn}\n        variant=\"primary\"\n      >\n        {isLogged ? shortAddr(currentAccount) : \"Connect\"}\n      </Button>{\" \"}\n    </div>\n  );\n};\n\nexport default LoginButton;\n"]},"metadata":{},"sourceType":"module"}