{"ast":null,"code":"import { ethers, Contract } from \"ethers\"; //import Web3 from \"web3\";\n\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst getBalance = async (token, account) => {\n  const balance = await token.balanceOf(account);\n  return ethers.utils.formatEther(balance);\n};\n\nconst ConnectWallet = async () => {\n  console.log(\"Try Connect\");\n\n  try {\n    await window.ethereum.enable();\n    const id = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n    setCurrentChainID(() => parseInt(id, 16));\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    setIsLogged(true);\n    setCurrentAccount(accounts[0]);\n    console.log(accounts);\n    return accounts[0];\n  } catch (err) {\n    if (err.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      // If this happens, the user rejected the connection request.\n      console.log(\"Please connect to MetaMask.\");\n      setMessage(messages => [...messages, {\n        head: \"User Rejected Request\",\n        body: \"Please connect to MetaMask.\",\n        variant: \"info\"\n      }]);\n    } else if (err.code === -32002) {\n      console.log(\"Please unlock MetaMask.\");\n      setMessage(messages => [...messages, {\n        head: \"User Request Pending\",\n        body: \"Please unlock MetaMask and try agin.\",\n        variant: \"info\"\n      }]);\n    } else {\n      console.error(err);\n      setMessage(messages => [...messages, {\n        head: \"Error\",\n        body: err.message,\n        variant: \"info\"\n      }]);\n    }\n  }\n};\n\n_c = ConnectWallet;\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const mytoken = new Contract(MyToken.address, MyToken.abi, signer); //const balance = getBalance(mytoken, signerAddress);\n\n      const balance = await mytoken.balanceOf(signerAddress); //console.log(balance);\n\n      console.log(ethers.utils.formatEther(balance)); //const contract = instance();\n\n      let artist = await mytoken._artist();\n      const percentage = ethers.utils.formatEther(await mytoken._percentage());\n      const admin = await mytoken.admin();\n\n      if (artist === \"0x0000000000000000000000000000000000000000\") {\n        artist = null;\n      }\n\n      console.log(artist);\n      console.log(percentage);\n      console.log(admin);\n      resolve({\n        signerAddress,\n        mytoken,\n        addresses: [artist, percentage, admin]\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      mytoken: undefined,\n      addresses: []\n    });\n  });\n});\n\nexport { getTokenBlockchain, getBalance, ConnectWallet };\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWallet\");","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","MyToken","getBalance","token","account","balance","balanceOf","utils","formatEther","ConnectWallet","console","log","window","ethereum","enable","id","request","method","setCurrentChainID","parseInt","accounts","setIsLogged","setCurrentAccount","err","code","setMessage","messages","head","body","variant","error","message","getTokenBlockchain","Promise","resolve","reject","addEventListener","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","mytoken","address","abi","artist","_artist","percentage","_percentage","admin","addresses","undefined"],"mappings":"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","sourcesContent":["import { ethers, Contract } from \"ethers\";\n//import Web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst getBalance = async (token, account) => {\n  const balance = await token.balanceOf(account);\n  return ethers.utils.formatEther(balance);\n};\n\nconst ConnectWallet = async () => {\n  console.log(\"Try Connect\");\n\n  try {\n    await window.ethereum.enable();\n\n    const id = await window.ethereum.request({ method: \"eth_chainId\" });\n    setCurrentChainID(() => parseInt(id, 16));\n\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n    setIsLogged(true);\n    setCurrentAccount(accounts[0]);\n\n    console.log(accounts);\n    return accounts[0];\n  } catch (err) {\n    if (err.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      // If this happens, the user rejected the connection request.\n      console.log(\"Please connect to MetaMask.\");\n      setMessage((messages) => [\n        ...messages,\n        {\n          head: \"User Rejected Request\",\n          body: \"Please connect to MetaMask.\",\n          variant: \"info\",\n        },\n      ]);\n    } else if (err.code === -32002) {\n      console.log(\"Please unlock MetaMask.\");\n      setMessage((messages) => [\n        ...messages,\n        {\n          head: \"User Request Pending\",\n          body: \"Please unlock MetaMask and try agin.\",\n          variant: \"info\",\n        },\n      ]);\n    } else {\n      console.error(err);\n      setMessage((messages) => [\n        ...messages,\n        { head: \"Error\", body: err.message, variant: \"info\" },\n      ]);\n    }\n  }\n};\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const mytoken = new Contract(MyToken.address, MyToken.abi, signer);\n        //const balance = getBalance(mytoken, signerAddress);\n        const balance = await mytoken.balanceOf(signerAddress);\n        //console.log(balance);\n        console.log(ethers.utils.formatEther(balance));\n\n        //const contract = instance();\n\n        let artist = await mytoken._artist();\n\n        const percentage = ethers.utils.formatEther(\n          await mytoken._percentage()\n        );\n\n        const admin = await mytoken.admin();\n\n        if (artist === \"0x0000000000000000000000000000000000000000\") {\n          artist = null;\n        }\n\n        console.log(artist);\n        console.log(percentage);\n        console.log(admin);\n\n        resolve({\n          signerAddress,\n          mytoken,\n          addresses: [artist, percentage, admin],\n        });\n      }\n      resolve({\n        signerAddress: undefined,\n        mytoken: undefined,\n        addresses: [],\n      });\n    });\n  });\n\nexport { getTokenBlockchain, getBalance, ConnectWallet };\n"]},"metadata":{},"sourceType":"module"}