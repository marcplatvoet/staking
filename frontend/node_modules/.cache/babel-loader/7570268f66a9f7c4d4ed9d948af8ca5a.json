{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport Token from \"../contracts/MockToken.json\";\nimport nftToken from \"../contracts/NFT.json\";\n\nconst getAmounts = async (provider, token, address) => {\n  let admin, artist, owner1, owner2;\n  [admin, artist, owner1, owner2] = await ethers.getSigners();\n  const amountWei = await token.balanceOf(address);\n  const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n  console.log(`amount: ${amount}`);\n  return amount;\n};\n\nconst getAmount = async (token, address) => {\n  const amountWei = await token.balanceOf(address);\n  const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n  console.log(`amount: ${amount}`);\n  return amount;\n};\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const token = new Contract(Token.address, Token.abi, signer);\n      const nfttoken = new Contract(nftToken.address, nftToken.abi, signer); // console.log(`token:${token.balanceOf(signerAddress)}`);\n      // console.log(`nfttoken:${nfttoken}`);\n\n      const [] = getAmounts(provider, token, amount);\n      resolve({\n        signerAddress,\n        token,\n        nfttoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      token: undefined,\n      nfttoken: undefined\n    });\n  });\n});\n\nexport { getTokenBlockchain, getAmount };","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","web3","Token","nftToken","getAmounts","provider","token","address","admin","artist","owner1","owner2","getSigners","amountWei","balanceOf","amount","parseInt","utils","fromWei","toBN","console","log","getAmount","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","abi","nfttoken","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,UAAU,GAAG,OAAOC,QAAP,EAAiBC,KAAjB,EAAwBC,OAAxB,KAAoC;AACrD,MAAIC,KAAJ,EAAWC,MAAX,EAAmBC,MAAnB,EAA2BC,MAA3B;AACA,GAACH,KAAD,EAAQC,MAAR,EAAgBC,MAAhB,EAAwBC,MAAxB,IAAkC,MAAMZ,MAAM,CAACa,UAAP,EAAxC;AACA,QAAMC,SAAS,GAAG,MAAMP,KAAK,CAACQ,SAAN,CAAgBP,OAAhB,CAAxB;AACA,QAAMQ,MAAM,GAAGC,QAAQ,CAACf,IAAI,CAACgB,KAAL,CAAWC,OAAX,CAAmBjB,IAAI,CAACgB,KAAL,CAAWE,IAAX,CAAgBN,SAAhB,CAAnB,CAAD,CAAvB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAa,WAAUN,MAAO,EAA9B;AACA,SAAOA,MAAP;AACD,CAPD;;AASA,MAAMO,SAAS,GAAG,OAAOhB,KAAP,EAAcC,OAAd,KAA0B;AAC1C,QAAMM,SAAS,GAAG,MAAMP,KAAK,CAACQ,SAAN,CAAgBP,OAAhB,CAAxB;AACA,QAAMQ,MAAM,GAAGC,QAAQ,CAACf,IAAI,CAACgB,KAAL,CAAWC,OAAX,CAAmBjB,IAAI,CAACgB,KAAL,CAAWE,IAAX,CAAgBN,SAAhB,CAAnB,CAAD,CAAvB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAa,WAAUN,MAAO,EAA9B;AACA,SAAOA,MAAP;AACD,CALD;;AAOA,MAAMQ,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CR,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBM,MAAM,CAACE,QAAS,EAAhD;;AACA,QAAIF,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMzB,QAAQ,GAAG,IAAIN,MAAM,CAACgC,SAAP,CAAiBC,YAArB,CAAkCL,MAAM,CAACE,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAMI,MAAM,GAAG5B,QAAQ,CAAC6B,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAM9B,KAAK,GAAG,IAAIN,QAAJ,CAAaE,KAAK,CAACK,OAAnB,EAA4BL,KAAK,CAACmC,GAAlC,EAAuCJ,MAAvC,CAAd;AACA,YAAMK,QAAQ,GAAG,IAAItC,QAAJ,CAAaG,QAAQ,CAACI,OAAtB,EAA+BJ,QAAQ,CAACkC,GAAxC,EAA6CJ,MAA7C,CAAjB,CATmB,CAUnB;AACA;;AAEA,YAAM,KAAK7B,UAAU,CAACC,QAAD,EAAWC,KAAX,EAAkBS,MAAlB,CAArB;AAEAU,MAAAA,OAAO,CAAC;AAAEU,QAAAA,aAAF;AAAiB7B,QAAAA,KAAjB;AAAwBgC,QAAAA;AAAxB,OAAD,CAAP;AACD;;AACDb,IAAAA,OAAO,CAAC;AACNU,MAAAA,aAAa,EAAEI,SADT;AAENjC,MAAAA,KAAK,EAAEiC,SAFD;AAGND,MAAAA,QAAQ,EAAEC;AAHJ,KAAD,CAAP;AAKD,GAxBD;AAyBD,CA1BD,CADF;;AA6BA,SAAShB,kBAAT,EAA6BD,SAA7B","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport Token from \"../contracts/MockToken.json\";\nimport nftToken from \"../contracts/NFT.json\";\n\nconst getAmounts = async (provider, token, address) => {\n  let admin, artist, owner1, owner2;\n  [admin, artist, owner1, owner2] = await ethers.getSigners();\n  const amountWei = await token.balanceOf(address);\n  const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n  console.log(`amount: ${amount}`);\n  return amount;\n};\n\nconst getAmount = async (token, address) => {\n  const amountWei = await token.balanceOf(address);\n  const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n  console.log(`amount: ${amount}`);\n  return amount;\n};\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const token = new Contract(Token.address, Token.abi, signer);\n        const nfttoken = new Contract(nftToken.address, nftToken.abi, signer);\n        // console.log(`token:${token.balanceOf(signerAddress)}`);\n        // console.log(`nfttoken:${nfttoken}`);\n\n        const [] = getAmounts(provider, token, amount);\n\n        resolve({ signerAddress, token, nfttoken });\n      }\n      resolve({\n        signerAddress: undefined,\n        token: undefined,\n        nfttoken: undefined,\n      });\n    });\n  });\n\nexport { getTokenBlockchain, getAmount };\n"]},"metadata":{},"sourceType":"module"}