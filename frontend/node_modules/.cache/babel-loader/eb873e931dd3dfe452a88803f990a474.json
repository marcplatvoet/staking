{"ast":null,"code":"import { ethers, Contract } from 'ethers';\nimport nftToken from '../contracts/NFT.json';\n\nconst getNFTBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener('load', async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log(provider);\n      const signer = provider.getSigner();\n      console.log(signer);\n      const signerAddress = await signer.getAddress();\n      console.log(signerAddress);\n      const nfttoken = new Contract(nftToken.address, nftToken.abi, signer);\n      resolve({\n        signerAddress,\n        nfttoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      nfttoken: undefined\n    });\n  });\n});\n\nexport default getNFTBlockchain;","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/frontend/src/components/nfttoken.js"],"names":["ethers","Contract","nftToken","getNFTBlockchain","Promise","resolve","reject","window","addEventListener","console","log","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","nfttoken","address","abi","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,gBAAgB,GAAG,MACvB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBH,MAAM,CAACI,QAAS,EAAhD;;AACA,QAAGJ,MAAM,CAACI,QAAV,EAAoB;AAClB,YAAMJ,MAAM,CAACI,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCR,MAAM,CAACI,QAAzC,CAAjB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,YAAMG,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYM,MAAZ;AACA,YAAME,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYQ,aAAZ;AACA,YAAME,QAAQ,GAAG,IAAInB,QAAJ,CACfC,QAAQ,CAACmB,OADM,EAEfnB,QAAQ,CAACoB,GAFM,EAGfN,MAHe,CAAjB;AAMAX,MAAAA,OAAO,CAAC;AAACa,QAAAA,aAAD;AAAgBE,QAAAA;AAAhB,OAAD,CAAP;AACD;;AACDf,IAAAA,OAAO,CAAC;AAACa,MAAAA,aAAa,EAAEK,SAAhB;AAA2BH,MAAAA,QAAQ,EAAEG;AAArC,KAAD,CAAP;AACD,GAnBD;AAoBD,CArBD,CADF;;AAwBA,eAAepB,gBAAf","sourcesContent":["import { ethers, Contract } from 'ethers';\nimport nftToken from '../contracts/NFT.json';\n\nconst getNFTBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener('load', async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if(window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        console.log(provider);\n        const signer = provider.getSigner();\n        console.log(signer);\n        const signerAddress = await signer.getAddress();\n        console.log(signerAddress);\n        const nfttoken = new Contract(\n          nftToken.address,\n          nftToken.abi,\n          signer\n        );\n\n        resolve({signerAddress, nfttoken});\n      }\n      resolve({signerAddress: undefined, nfttoken: undefined});\n    });\n  });\n\nexport default getNFTBlockchain;\n"]},"metadata":{},"sourceType":"module"}