{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport Token from \"../contracts/MockToken.json\";\nimport nftToken from \"../contracts/NFT.json\";\nimport addresses from \"../contracts/addresses.json\";\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      console.log(`provider: ${provider}`);\n      const signer = provider.getSigner();\n      console.log(`signer:${signer}`);\n      const signerAddress = await signer.getAddress();\n      console.log(`signerAddress:${signerAddress}`);\n      const token = new Contract(Token.address, Token.abi, signer);\n      const nfttoken = new Contract(nftToken.address, nftToken.abi, signer);\n      const amountWei = await token.balanceOf(signerAddress);\n      const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n      console.log(`amount: ${amount}`);\n      console.log(`token:${token.balanceOf(signerAddress)}`);\n      console.log(`nfttoken:${nfttoken}`);\n      resolve({\n        signerAddress,\n        token,\n        nfttoken,\n        amount\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      token: undefined,\n      nfttoken: undefined\n    });\n  });\n});\n\nexport default getTokenBlockchain;","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","web3","Token","nftToken","addresses","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","console","log","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","token","address","abi","nfttoken","amountWei","balanceOf","amount","parseInt","utils","fromWei","toBN","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;AAEA,MAAMC,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBH,MAAM,CAACI,QAAS,EAAhD;;AACA,QAAIJ,MAAM,CAACI,QAAX,EAAqB;AACnB,YAAMJ,MAAM,CAACI,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIhB,MAAM,CAACiB,SAAP,CAAiBC,YAArB,CAAkCR,MAAM,CAACI,QAAzC,CAAjB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAa,aAAYG,QAAS,EAAlC;AACA,YAAMG,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASM,MAAO,EAA7B;AACA,YAAME,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBQ,aAAc,EAA3C;AAEA,YAAME,KAAK,GAAG,IAAItB,QAAJ,CAAaE,KAAK,CAACqB,OAAnB,EAA4BrB,KAAK,CAACsB,GAAlC,EAAuCN,MAAvC,CAAd;AAEA,YAAMO,QAAQ,GAAG,IAAIzB,QAAJ,CAAaG,QAAQ,CAACoB,OAAtB,EAA+BpB,QAAQ,CAACqB,GAAxC,EAA6CN,MAA7C,CAAjB;AAEA,YAAMQ,SAAS,GAAG,MAAMJ,KAAK,CAACK,SAAN,CAAgBP,aAAhB,CAAxB;AACA,YAAMQ,MAAM,GAAGC,QAAQ,CAAC5B,IAAI,CAAC6B,KAAL,CAAWC,OAAX,CAAmB9B,IAAI,CAAC6B,KAAL,CAAWE,IAAX,CAAgBN,SAAhB,CAAnB,CAAD,CAAvB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAa,WAAUgB,MAAO,EAA9B;AAEAjB,MAAAA,OAAO,CAACC,GAAR,CAAa,SAAQU,KAAK,CAACK,SAAN,CAAgBP,aAAhB,CAA+B,EAApD;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAWa,QAAS,EAAjC;AACAlB,MAAAA,OAAO,CAAC;AAAEa,QAAAA,aAAF;AAAiBE,QAAAA,KAAjB;AAAwBG,QAAAA,QAAxB;AAAkCG,QAAAA;AAAlC,OAAD,CAAP;AACD;;AACDrB,IAAAA,OAAO,CAAC;AACNa,MAAAA,aAAa,EAAEa,SADT;AAENX,MAAAA,KAAK,EAAEW,SAFD;AAGNR,MAAAA,QAAQ,EAAEQ;AAHJ,KAAD,CAAP;AAKD,GA5BD;AA6BD,CA9BD,CADF;;AAiCA,eAAe5B,kBAAf","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport Token from \"../contracts/MockToken.json\";\nimport nftToken from \"../contracts/NFT.json\";\nimport addresses from \"../contracts/addresses.json\";\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        console.log(`signerAddress:${signerAddress}`);\n\n        const token = new Contract(Token.address, Token.abi, signer);\n\n        const nfttoken = new Contract(nftToken.address, nftToken.abi, signer);\n\n        const amountWei = await token.balanceOf(signerAddress);\n        const amount = parseInt(web3.utils.fromWei(web3.utils.toBN(amountWei)));\n        console.log(`amount: ${amount}`);\n\n        console.log(`token:${token.balanceOf(signerAddress)}`);\n        console.log(`nfttoken:${nfttoken}`);\n        resolve({ signerAddress, token, nfttoken, amount });\n      }\n      resolve({\n        signerAddress: undefined,\n        token: undefined,\n        nfttoken: undefined,\n      });\n    });\n  });\n\nexport default getTokenBlockchain;\n"]},"metadata":{},"sourceType":"module"}