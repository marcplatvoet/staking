{"ast":null,"code":"import detectEthereumProvider from '@metamask/detect-provider';\n\nconst SignIn = () => new Promise(async (resolve, reject) => {\n  //Detect Provider\n  const provider = await detectEthereumProvider(); //const web3 = new Web3(provider)\n\n  if (!provider) {\n    const message = [{\n      head: \"Wallet not found\",\n      body: `Please install MetaMask!`,\n      variant: 'warning'\n    }];\n    reject({\n      message,\n      provider\n    });\n    return;\n  } else {\n    const address = await ConnectWallet();\n\n    if (address) {\n      const message = [{\n        head: \"User Login\",\n        body: `addres: ${address}`,\n        variant: 'success'\n      }];\n    }\n\n    resolve({\n      message,\n      provider,\n      address\n    });\n    return;\n  }\n});\n\n_c = SignIn;\nexport default SignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/connectButton/src/components/signin.js"],"names":["detectEthereumProvider","SignIn","Promise","resolve","reject","provider","message","head","body","variant","address","ConnectWallet"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;;AAEA,MAAMC,MAAM,GAAG,MACb,IAAIC,OAAJ,CAAa,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACtC;AACA,QAAMC,QAAQ,GAAG,MAAML,sBAAsB,EAA7C,CAFsC,CAGtC;;AACA,MAAG,CAACK,QAAJ,EAAc;AACZ,UAAMC,OAAO,GAAG,CAAC;AAACC,MAAAA,IAAI,EAAG,kBAAR;AAA4BC,MAAAA,IAAI,EAAG,0BAAnC;AAA8DC,MAAAA,OAAO,EAAE;AAAvE,KAAD,CAAhB;AACAL,IAAAA,MAAM,CAAC;AAACE,MAAAA,OAAD;AAASD,MAAAA;AAAT,KAAD,CAAN;AACA;AACD,GAJD,MAMA;AACE,UAAMK,OAAO,GAAG,MAAMC,aAAa,EAAnC;;AACA,QAAID,OAAJ,EACA;AACE,YAAMJ,OAAO,GAAG,CAAC;AAACC,QAAAA,IAAI,EAAG,YAAR;AAAsBC,QAAAA,IAAI,EAAG,WAAUE,OAAQ,EAA/C;AAAkDD,QAAAA,OAAO,EAAE;AAA3D,OAAD,CAAhB;AACD;;AACDN,IAAAA,OAAO,CAAC;AAACG,MAAAA,OAAD;AAASD,MAAAA,QAAT;AAAkBK,MAAAA;AAAlB,KAAD,CAAP;AACA;AACD;AACF,CAnBD,CADF;;KAAMT,M;AAsBN,eAAeA,MAAf","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\n\nconst SignIn = () =>\n  new Promise( async (resolve, reject) => {\n    //Detect Provider\n    const provider = await detectEthereumProvider()\n    //const web3 = new Web3(provider)\n    if(!provider) {\n      const message = [{head : \"Wallet not found\", body: `Please install MetaMask!`, variant: 'warning'}];\n      reject({message,provider});\n      return;\n    } \n    else \n    {\n      const address = await ConnectWallet()\n      if (address)\n      {\n        const message = [{head : \"User Login\", body: `addres: ${address}`, variant: 'success'}];\n      }\n      resolve({message,provider,address});\n      return;\n    }\n  });\n\nexport default SignIn;"]},"metadata":{},"sourceType":"module"}