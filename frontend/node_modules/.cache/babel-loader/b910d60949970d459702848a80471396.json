{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\"; // const getArtist = async (mytoken) => {\n//   return await mytoken._artist;\n// };\n\nasync function printCoolNumber() {\n  let web3 = new web3(new web3.providers.HttpProvider(\"http://localhost:8545\"));\n  const contract = new web3.eth.Contract(MyToken.address, MyToken.abi);\n  console.log(\"fetching Cool Number...\");\n  const coolNumber = await contract.methods.name().call();\n  return coolNumber;\n}\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const mytoken = new Contract(MyToken.address, MyToken.abi, signer); //const balance = getBalance(mytoken, signerAddress);\n\n      const balance = await mytoken.balanceOf(signerAddress); //console.log(balance);\n\n      console.log(ethers.utils.formatEther(balance)); //const artist = await mytoken.getArtist();\n\n      console.log(printCoolNumber()); // const contract_fac = await mytoken._artist();\n      // console.log(contract_fac);\n      // const artist = getArtist(mytoken);\n      // console.log(artist);\n      // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n      resolve({\n        signerAddress,\n        mytoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      mytoken: undefined\n    });\n  });\n});\n\nexport { getTokenBlockchain };","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","web3","MyToken","printCoolNumber","providers","HttpProvider","contract","eth","address","abi","console","log","coolNumber","methods","name","call","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","Web3Provider","signer","getSigner","signerAddress","getAddress","mytoken","balance","balanceOf","utils","formatEther","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;AACA;AACA;;AAEA,eAAeC,eAAf,GAAiC;AAC/B,MAAIF,IAAI,GAAG,IAAIA,IAAJ,CAAS,IAAIA,IAAI,CAACG,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAT,CAAX;AACA,QAAMC,QAAQ,GAAG,IAAIL,IAAI,CAACM,GAAL,CAASP,QAAb,CAAsBE,OAAO,CAACM,OAA9B,EAAuCN,OAAO,CAACO,GAA/C,CAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,QAAMC,UAAU,GAAG,MAAMN,QAAQ,CAACO,OAAT,CAAiBC,IAAjB,GAAwBC,IAAxB,EAAzB;AACA,SAAOH,UAAP;AACD;;AAED,MAAMI,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CX,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBS,MAAM,CAACE,QAAS,EAAhD;;AACA,QAAIF,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIzB,MAAM,CAACK,SAAP,CAAiBqB,YAArB,CAAkCL,MAAM,CAACE,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAMI,MAAM,GAAGF,QAAQ,CAACG,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAMC,OAAO,GAAG,IAAI9B,QAAJ,CAAaE,OAAO,CAACM,OAArB,EAA8BN,OAAO,CAACO,GAAtC,EAA2CiB,MAA3C,CAAhB,CARmB,CASnB;;AACA,YAAMK,OAAO,GAAG,MAAMD,OAAO,CAACE,SAAR,CAAkBJ,aAAlB,CAAtB,CAVmB,CAWnB;;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAM,CAACkC,KAAP,CAAaC,WAAb,CAAyBH,OAAzB,CAAZ,EAZmB,CAcnB;;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAYR,eAAe,EAA3B,EAfmB,CAgBnB;AACA;AACA;AACA;AACA;;AAEAe,MAAAA,OAAO,CAAC;AAAEU,QAAAA,aAAF;AAAiBE,QAAAA;AAAjB,OAAD,CAAP;AACD;;AACDZ,IAAAA,OAAO,CAAC;AACNU,MAAAA,aAAa,EAAEO,SADT;AAENL,MAAAA,OAAO,EAAEK;AAFH,KAAD,CAAP;AAID,GA9BD;AA+BD,CAhCD,CADF;;AAmCA,SAASnB,kBAAT","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\n// const getArtist = async (mytoken) => {\n//   return await mytoken._artist;\n// };\n\nasync function printCoolNumber() {\n  let web3 = new web3(new web3.providers.HttpProvider(\"http://localhost:8545\"));\n  const contract = new web3.eth.Contract(MyToken.address, MyToken.abi);\n  console.log(\"fetching Cool Number...\");\n  const coolNumber = await contract.methods.name().call();\n  return coolNumber;\n}\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const mytoken = new Contract(MyToken.address, MyToken.abi, signer);\n        //const balance = getBalance(mytoken, signerAddress);\n        const balance = await mytoken.balanceOf(signerAddress);\n        //console.log(balance);\n        console.log(ethers.utils.formatEther(balance));\n\n        //const artist = await mytoken.getArtist();\n        console.log(printCoolNumber());\n        // const contract_fac = await mytoken._artist();\n        // console.log(contract_fac);\n        // const artist = getArtist(mytoken);\n        // console.log(artist);\n        // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n        resolve({ signerAddress, mytoken });\n      }\n      resolve({\n        signerAddress: undefined,\n        mytoken: undefined,\n      });\n    });\n  });\n\nexport { getTokenBlockchain };\n"]},"metadata":{},"sourceType":"module"}