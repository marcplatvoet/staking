{"ast":null,"code":"import { ethers, Contract } from \"ethers\"; // import web3 from \"web3\";\n\nimport MyToken from \"../contracts/MyToken.json\"; // const getArtist = async (mytoken) => {\n//   return await mytoken._artist;\n// };\n\nconst getBalance = async (mytoken, account) => {\n  const balance = await mytoken.balanceOf(account);\n  return balance;\n};\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const mytoken = new Contract(MyToken.address, MyToken.abi, signer); //const balance = getBalance(mytoken, signerAddress);\n\n      const balance = await mytoken.balanceOf(signerAddress);\n      console.log(balance); // const artist = getArtist(mytoken);\n      // console.log(artist);\n      // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n      resolve({\n        signerAddress,\n        mytoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      mytoken: undefined\n    });\n  });\n});\n\nexport { getTokenBlockchain };","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","MyToken","getBalance","mytoken","account","balance","balanceOf","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","console","log","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","address","abi","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,OAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AAC7C,QAAMC,OAAO,GAAG,MAAMF,OAAO,CAACG,SAAR,CAAkBF,OAAlB,CAAtB;AACA,SAAOC,OAAP;AACD,CAHD;;AAKA,MAAME,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBH,MAAM,CAACI,QAAS,EAAhD;;AACA,QAAIJ,MAAM,CAACI,QAAX,EAAqB;AACnB,YAAMJ,MAAM,CAACI,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIlB,MAAM,CAACmB,SAAP,CAAiBC,YAArB,CAAkCR,MAAM,CAACI,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAMpB,OAAO,GAAG,IAAIH,QAAJ,CAAaC,OAAO,CAACuB,OAArB,EAA8BvB,OAAO,CAACwB,GAAtC,EAA2CL,MAA3C,CAAhB,CARmB,CASnB;;AACA,YAAMf,OAAO,GAAG,MAAMF,OAAO,CAACG,SAAR,CAAkBgB,aAAlB,CAAtB;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ,EAXmB,CAYnB;AACA;AACA;;AAEAI,MAAAA,OAAO,CAAC;AAAEa,QAAAA,aAAF;AAAiBnB,QAAAA;AAAjB,OAAD,CAAP;AACD;;AACDM,IAAAA,OAAO,CAAC;AACNa,MAAAA,aAAa,EAAEI,SADT;AAENvB,MAAAA,OAAO,EAAEuB;AAFH,KAAD,CAAP;AAID,GAxBD;AAyBD,CA1BD,CADF;;AA6BA,SAASnB,kBAAT","sourcesContent":["import { ethers, Contract } from \"ethers\";\n// import web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\n// const getArtist = async (mytoken) => {\n//   return await mytoken._artist;\n// };\n\nconst getBalance = async (mytoken, account) => {\n  const balance = await mytoken.balanceOf(account);\n  return balance;\n};\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const mytoken = new Contract(MyToken.address, MyToken.abi, signer);\n        //const balance = getBalance(mytoken, signerAddress);\n        const balance = await mytoken.balanceOf(signerAddress);\n        console.log(balance);\n        // const artist = getArtist(mytoken);\n        // console.log(artist);\n        // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n        resolve({ signerAddress, mytoken });\n      }\n      resolve({\n        signerAddress: undefined,\n        mytoken: undefined,\n      });\n    });\n  });\n\nexport { getTokenBlockchain };\n"]},"metadata":{},"sourceType":"module"}