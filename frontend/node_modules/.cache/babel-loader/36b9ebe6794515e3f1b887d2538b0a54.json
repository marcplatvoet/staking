{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\"; // const getArtist = async (mytoken) => {\n//   return await mytoken._artist;\n// };\n\nasync function instance() {\n  new Promise(async (resolve, reject) => {\n    try {\n      // get contract instance\n      const web3 = await getWeb3();\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = await Artifact.networks[networkId];\n      contractAddress = await deployedNetwork.address;\n      const instance = new web3.eth.Contract(Artifact.abi, deployedNetwork && deployedNetwork.address);\n      resolve(instance);\n    } catch (error) {\n      console.log(error + \"Could not get instance from  chain.\");\n      reject(error);\n    }\n  });\n}\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const mytoken = new Contract(MyToken.address, MyToken.abi, signer); //const balance = getBalance(mytoken, signerAddress);\n\n      const balance = await mytoken.balanceOf(signerAddress); //console.log(balance);\n\n      console.log(ethers.utils.formatEther(balance));\n      const contract = instance(); //const artist = await mytoken.getArtist();\n\n      console.log(contract); // const contract_fac = await mytoken._artist();\n      // console.log(contract_fac);\n      // const artist = getArtist(mytoken);\n      // console.log(artist);\n      // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n      resolve({\n        signerAddress,\n        mytoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      mytoken: undefined\n    });\n  });\n});\n\nexport { getTokenBlockchain };","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","web3","MyToken","instance","Promise","resolve","reject","getWeb3","networkId","eth","net","getId","console","log","deployedNetwork","Artifact","networks","contractAddress","address","abi","error","getTokenBlockchain","window","addEventListener","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","mytoken","balance","balanceOf","utils","formatEther","contract","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;AACA;AACA;;AAEA,eAAeC,QAAf,GAA0B;AACxB,MAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AACrC,QAAI;AACF;AACA,YAAML,IAAI,GAAG,MAAMM,OAAO,EAA1B;AACA,YAAMC,SAAS,GAAG,MAAMP,IAAI,CAACQ,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACA,YAAMM,eAAe,GAAG,MAAMC,QAAQ,CAACC,QAAT,CAAkBR,SAAlB,CAA9B;AACAS,MAAAA,eAAe,GAAG,MAAMH,eAAe,CAACI,OAAxC;AACA,YAAMf,QAAQ,GAAG,IAAIF,IAAI,CAACQ,GAAL,CAAST,QAAb,CACfe,QAAQ,CAACI,GADM,EAEfL,eAAe,IAAIA,eAAe,CAACI,OAFpB,CAAjB;AAIAb,MAAAA,OAAO,CAACF,QAAD,CAAP;AACD,KAZD,CAYE,OAAOiB,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAK,GAAG,qCAApB;AACAd,MAAAA,MAAM,CAACc,KAAD,CAAN;AACD;AACF,GAjBD;AAkBD;;AAED,MAAMC,kBAAkB,GAAG,MACzB,IAAIjB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BgB,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CX,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBS,MAAM,CAACE,QAAS,EAAhD;;AACA,QAAIF,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAI3B,MAAM,CAAC4B,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAMC,OAAO,GAAG,IAAIjC,QAAJ,CAAaE,OAAO,CAACgB,OAArB,EAA8BhB,OAAO,CAACiB,GAAtC,EAA2CU,MAA3C,CAAhB,CARmB,CASnB;;AACA,YAAMK,OAAO,GAAG,MAAMD,OAAO,CAACE,SAAR,CAAkBJ,aAAlB,CAAtB,CAVmB,CAWnB;;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAYd,MAAM,CAACqC,KAAP,CAAaC,WAAb,CAAyBH,OAAzB,CAAZ;AAEA,YAAMI,QAAQ,GAAGnC,QAAQ,EAAzB,CAdmB,CAgBnB;;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYyB,QAAZ,EAjBmB,CAkBnB;AACA;AACA;AACA;AACA;;AAEAjC,MAAAA,OAAO,CAAC;AAAE0B,QAAAA,aAAF;AAAiBE,QAAAA;AAAjB,OAAD,CAAP;AACD;;AACD5B,IAAAA,OAAO,CAAC;AACN0B,MAAAA,aAAa,EAAEQ,SADT;AAENN,MAAAA,OAAO,EAAEM;AAFH,KAAD,CAAP;AAID,GAhCD;AAiCD,CAlCD,CADF;;AAqCA,SAASlB,kBAAT","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\n// const getArtist = async (mytoken) => {\n//   return await mytoken._artist;\n// };\n\nasync function instance() {\n  new Promise(async (resolve, reject) => {\n    try {\n      // get contract instance\n      const web3 = await getWeb3();\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = await Artifact.networks[networkId];\n      contractAddress = await deployedNetwork.address;\n      const instance = new web3.eth.Contract(\n        Artifact.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      resolve(instance);\n    } catch (error) {\n      console.log(error + \"Could not get instance from  chain.\");\n      reject(error);\n    }\n  });\n}\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const mytoken = new Contract(MyToken.address, MyToken.abi, signer);\n        //const balance = getBalance(mytoken, signerAddress);\n        const balance = await mytoken.balanceOf(signerAddress);\n        //console.log(balance);\n        console.log(ethers.utils.formatEther(balance));\n\n        const contract = instance();\n\n        //const artist = await mytoken.getArtist();\n        console.log(contract);\n        // const contract_fac = await mytoken._artist();\n        // console.log(contract_fac);\n        // const artist = getArtist(mytoken);\n        // console.log(artist);\n        // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n        resolve({ signerAddress, mytoken });\n      }\n      resolve({\n        signerAddress: undefined,\n        mytoken: undefined,\n      });\n    });\n  });\n\nexport { getTokenBlockchain };\n"]},"metadata":{},"sourceType":"module"}