{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport Web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst getBalance = async (token, account) => {\n  const balance = await token.balanceOf(account);\n  return ethers.utils.formatEther(balance);\n}; // const getWeb3 = async () => {\n//   // Init\n//   const web3Provider = new Web3.providers.HttpProvider(\"http://localhost:8545\");\n//   const web3 = new Web3(web3Provider);\n//   console.log(web3);\n//   let accounts = await web3.eth.getAccounts();\n//   console.log(accounts);\n//   let contract = new web3.eth.Contract(MyToken.abi, MyToken.address);\n//   console.log(MyToken.address);\n//   let artist = await contract.methods.getAdmin();\n//   console.log(artist);\n//   web3.eth.defaultAccount = accounts[0];\n//   var result = contract.methods.admin.call().call((error, result) => {\n//     console.log(result);\n//   });\n//   console.log(result);\n//   console.log(contract.admin());\n//   //const Web3 = require(\"web3\");\n//   console.log(\"Web3.eth = \" + web3.eth);\n//   console.log(\"Web3.utils = \" + web3.utils);\n//   console.log(\"Web3.bzz = \" + web3.bzz);\n//   console.log(\"Web3.shh = \" + web3.shh);\n//   // var owner = contract.owner.call();\n//   // console.log(owner);\n//   // let result = contract.methods.admin.call((error, result) => {\n//   //   console.log(result);\n//   // });\n//   // console.log(result);\n// };\n\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const mytoken = new Contract(MyToken.address, MyToken.abi, signer); //const balance = getBalance(mytoken, signerAddress);\n\n      const balance = await mytoken.balanceOf(signerAddress); //console.log(balance);\n\n      console.log(ethers.utils.formatEther(balance)); //const contract = instance();\n\n      const artist = await mytoken._artist();\n      console.log(artist);\n      const percentage = ethers.utils.formatEther(await mytoken._percentage());\n      console.log(percentage);\n      const admin = await mytoken.admin();\n      console.log(admin);\n\n      if (artist == \"0x0000000000000000000000000000000000000000\") {\n        artist = null;\n      } //getWeb3();\n      // const contract_fac = await mytoken._artist();\n      // console.log(contract_fac);\n      // const artist = getArtist(mytoken);\n      // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n\n      resolve({\n        signerAddress,\n        mytoken,\n        addresses: [artist, percentage, admin]\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      mytoken: undefined,\n      addresses: []\n    });\n  });\n});\n\nexport { getTokenBlockchain, getBalance };","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","Web3","MyToken","getBalance","token","account","balance","balanceOf","utils","formatEther","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","console","log","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","mytoken","address","abi","artist","_artist","percentage","_percentage","admin","addresses","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,UAAU,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC3C,QAAMC,OAAO,GAAG,MAAMF,KAAK,CAACG,SAAN,CAAgBF,OAAhB,CAAtB;AACA,SAAON,MAAM,CAACS,KAAP,CAAaC,WAAb,CAAyBH,OAAzB,CAAP;AACD,CAHD,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBH,MAAM,CAACI,QAAS,EAAhD;;AACA,QAAIJ,MAAM,CAACI,QAAX,EAAqB;AACnB,YAAMJ,MAAM,CAACI,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAIrB,MAAM,CAACsB,SAAP,CAAiBC,YAArB,CAAkCR,MAAM,CAACI,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAMC,OAAO,GAAG,IAAI3B,QAAJ,CAAaE,OAAO,CAAC0B,OAArB,EAA8B1B,OAAO,CAAC2B,GAAtC,EAA2CN,MAA3C,CAAhB,CARmB,CASnB;;AACA,YAAMjB,OAAO,GAAG,MAAMqB,OAAO,CAACpB,SAAR,CAAkBkB,aAAlB,CAAtB,CAVmB,CAWnB;;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAM,CAACS,KAAP,CAAaC,WAAb,CAAyBH,OAAzB,CAAZ,EAZmB,CAcnB;;AAEA,YAAMwB,MAAM,GAAG,MAAMH,OAAO,CAACI,OAAR,EAArB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAYa,MAAZ;AACA,YAAME,UAAU,GAAGjC,MAAM,CAACS,KAAP,CAAaC,WAAb,CACjB,MAAMkB,OAAO,CAACM,WAAR,EADW,CAAnB;AAGAjB,MAAAA,OAAO,CAACC,GAAR,CAAYe,UAAZ;AACA,YAAME,KAAK,GAAG,MAAMP,OAAO,CAACO,KAAR,EAApB;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;;AAEA,UAAIJ,MAAM,IAAI,4CAAd,EAA4D;AAC1DA,QAAAA,MAAM,GAAG,IAAT;AACD,OA3BkB,CA4BnB;AACA;AACA;AACA;AAEA;;;AAEAlB,MAAAA,OAAO,CAAC;AACNa,QAAAA,aADM;AAENE,QAAAA,OAFM;AAGNQ,QAAAA,SAAS,EAAE,CAACL,MAAD,EAASE,UAAT,EAAqBE,KAArB;AAHL,OAAD,CAAP;AAKD;;AACDtB,IAAAA,OAAO,CAAC;AACNa,MAAAA,aAAa,EAAEW,SADT;AAENT,MAAAA,OAAO,EAAES,SAFH;AAGND,MAAAA,SAAS,EAAE;AAHL,KAAD,CAAP;AAKD,GAhDD;AAiDD,CAlDD,CADF;;AAqDA,SAASzB,kBAAT,EAA6BP,UAA7B","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport Web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\nconst getBalance = async (token, account) => {\n  const balance = await token.balanceOf(account);\n  return ethers.utils.formatEther(balance);\n};\n\n// const getWeb3 = async () => {\n//   // Init\n//   const web3Provider = new Web3.providers.HttpProvider(\"http://localhost:8545\");\n//   const web3 = new Web3(web3Provider);\n//   console.log(web3);\n//   let accounts = await web3.eth.getAccounts();\n//   console.log(accounts);\n//   let contract = new web3.eth.Contract(MyToken.abi, MyToken.address);\n//   console.log(MyToken.address);\n//   let artist = await contract.methods.getAdmin();\n//   console.log(artist);\n//   web3.eth.defaultAccount = accounts[0];\n\n//   var result = contract.methods.admin.call().call((error, result) => {\n//     console.log(result);\n//   });\n//   console.log(result);\n//   console.log(contract.admin());\n\n//   //const Web3 = require(\"web3\");\n//   console.log(\"Web3.eth = \" + web3.eth);\n//   console.log(\"Web3.utils = \" + web3.utils);\n//   console.log(\"Web3.bzz = \" + web3.bzz);\n//   console.log(\"Web3.shh = \" + web3.shh);\n\n//   // var owner = contract.owner.call();\n//   // console.log(owner);\n\n//   // let result = contract.methods.admin.call((error, result) => {\n//   //   console.log(result);\n//   // });\n//   // console.log(result);\n// };\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const mytoken = new Contract(MyToken.address, MyToken.abi, signer);\n        //const balance = getBalance(mytoken, signerAddress);\n        const balance = await mytoken.balanceOf(signerAddress);\n        //console.log(balance);\n        console.log(ethers.utils.formatEther(balance));\n\n        //const contract = instance();\n\n        const artist = await mytoken._artist();\n        console.log(artist);\n        const percentage = ethers.utils.formatEther(\n          await mytoken._percentage()\n        );\n        console.log(percentage);\n        const admin = await mytoken.admin();\n        console.log(admin);\n\n        if (artist == \"0x0000000000000000000000000000000000000000\") {\n          artist = null;\n        }\n        //getWeb3();\n        // const contract_fac = await mytoken._artist();\n        // console.log(contract_fac);\n        // const artist = getArtist(mytoken);\n\n        // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n        resolve({\n          signerAddress,\n          mytoken,\n          addresses: [artist, percentage, admin],\n        });\n      }\n      resolve({\n        signerAddress: undefined,\n        mytoken: undefined,\n        addresses: [],\n      });\n    });\n  });\n\nexport { getTokenBlockchain, getBalance };\n"]},"metadata":{},"sourceType":"module"}