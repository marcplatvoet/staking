{"ast":null,"code":"import detectEthereumProvider from '@metamask/detect-provider';\n\nconst ConnectWallet = () => new Promise(async (resolve, reject) => {\n  let messages = [];\n  console.log(\"Try Connect\");\n\n  try {\n    await window.ethereum.enable();\n    const chainid = await window.ethereum.request({\n      method: 'eth_chainId'\n    }); //setCurrentChainID(() => parseInt(id, 16))\n\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }); // setIsLogged(true)\n    // setCurrentAccount(accounts[0])\n\n    resolve(messages, parseInt(chainid, 16), true, accounts[0]);\n    return;\n  } catch (err) {\n    if (err.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      // If this happens, the user rejected the connection request.\n      console.log('Please connect to MetaMask.');\n      messages = [...messages, {\n        head: \"User Rejected Request\",\n        body: 'Please connect to MetaMask.',\n        variant: 'info'\n      }];\n    } else if (err.code === -32002) {\n      console.log('Please unlock MetaMask.');\n      messages = [...messages, {\n        head: \"User Request Pending\",\n        body: 'Please unlock MetaMask and try agin.',\n        variant: 'info'\n      }];\n    } else {\n      console.error(err);\n      messages = [...messages, {\n        head: \"Error\",\n        body: err.message,\n        variant: 'info'\n      }];\n    }\n\n    reject(messages, 0, false, undefined);\n  }\n});\n\n_c = ConnectWallet;\n\nconst SignIn = () => new Promise(async (resolve, reject) => {\n  let messages = [];\n  let chainid = undefined;\n  let loggedin = undefined; //Detect Provider\n\n  const provider = await detectEthereumProvider(); //const web3 = new Web3(provider)\n\n  if (!provider) {\n    messages = [...messages, {\n      head: \"Wallet not found\",\n      body: `Please install MetaMask!`,\n      variant: 'warning'\n    }];\n    reject({\n      messages,\n      provider\n    });\n    return;\n  } else {\n    const {\n      messages,\n      chainid,\n      loggedin,\n      account\n    } = await ConnectWallet();\n\n    if (address) {\n      messages = [...messages, {\n        head: \"User Login\",\n        body: `addres: ${address}`,\n        variant: 'success'\n      }];\n    }\n\n    resolve({\n      messages,\n      provider,\n      address\n    });\n    return;\n  }\n});\n\n_c2 = SignIn;\nexport default SignIn;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ConnectWallet\");\n$RefreshReg$(_c2, \"SignIn\");","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/connectButton/src/components/signin.js"],"names":["detectEthereumProvider","ConnectWallet","Promise","resolve","reject","messages","console","log","window","ethereum","enable","chainid","request","method","accounts","parseInt","err","code","head","body","variant","error","message","undefined","SignIn","loggedin","provider","account","address"],"mappings":"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","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\n\n\nconst ConnectWallet = () =>\n  new Promise( async (resolve, reject) => {\n    let messages = [];\n    console.log(\"Try Connect\");\n\n    try {\n      await window.ethereum.enable();\n\n      const chainid = await window.ethereum.request({ method: 'eth_chainId' })\n      //setCurrentChainID(() => parseInt(id, 16))\n\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      // setIsLogged(true)\n      // setCurrentAccount(accounts[0])\n\n      resolve(messages,parseInt(chainid, 16),true,accounts[0]);\n      return;\n\n    } catch(err) {\n        if (err.code === 4001) {\n          // EIP-1193 userRejectedRequest error\n          // If this happens, the user rejected the connection request.\n          console.log('Please connect to MetaMask.')\n          messages = [...messages, {head : \"User Rejected Request\", body: 'Please connect to MetaMask.', variant: 'info'}];\n\n        } else if(err.code === -32002) {\n          console.log('Please unlock MetaMask.')\n          messages = [...messages, {head : \"User Request Pending\", body: 'Please unlock MetaMask and try agin.', variant: 'info'}];\n        } else {\n          console.error(err);\n          messages = [...messages, {head : \"Error\", body: err.message, variant: 'info'}];\n        }\n        reject(messages,0,false,undefined);\n    }\n  });\n\n\nconst SignIn = () =>\n  new Promise( async (resolve, reject) => {\n    let messages = [];\n    let chainid = undefined;\n    let loggedin = undefined;\n    //Detect Provider\n    const provider = await detectEthereumProvider()\n    //const web3 = new Web3(provider)\n    if(!provider) {\n      messages = [...messages,{head : \"Wallet not found\", body: `Please install MetaMask!`, variant: 'warning'}];\n      reject({messages,provider});\n      return;\n    } \n    else \n    {\n      const {messages,chainid,loggedin,account} = await ConnectWallet()\n      if (address)\n      {\n        messages = [...messages,{head : \"User Login\", body: `addres: ${address}`, variant: 'success'}];\n      }\n      resolve({messages,provider,address});\n      return;\n    }\n  });\n\nexport default SignIn;"]},"metadata":{},"sourceType":"module"}