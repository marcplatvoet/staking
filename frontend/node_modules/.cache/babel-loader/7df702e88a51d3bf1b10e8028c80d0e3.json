{"ast":null,"code":"import detectEthereumProvider from '@metamask/detect-provider';\nconst messages = [];\n\nconst ConnectWallet = () => new Promise(async (resolve, reject) => {\n  console.log(\"Try Connect\");\n\n  try {\n    await window.ethereum.enable();\n    const chainid = await window.ethereum.request({\n      method: 'eth_chainId'\n    }); //setCurrentChainID(() => parseInt(id, 16))\n\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    setIsLogged(true);\n    setCurrentAccount(accounts[0]);\n    resolve(parseInt(chainid, 16));\n    return accounts[0];\n  } catch (err) {\n    if (err.code === 4001) {\n      // EIP-1193 userRejectedRequest error\n      // If this happens, the user rejected the connection request.\n      console.log('Please connect to MetaMask.');\n      setMessage(messages => [...messages, {\n        head: \"User Rejected Request\",\n        body: 'Please connect to MetaMask.',\n        variant: 'info'\n      }]);\n    } else if (err.code === -32002) {\n      console.log('Please unlock MetaMask.');\n      setMessage(messages => [...messages, {\n        head: \"User Request Pending\",\n        body: 'Please unlock MetaMask and try agin.',\n        variant: 'info'\n      }]);\n    } else {\n      console.error(err);\n      setMessage(messages => [...messages, {\n        head: \"Error\",\n        body: err.message,\n        variant: 'info'\n      }]);\n    }\n  }\n});\n\n_c = ConnectWallet;\n\nconst SignIn = () => new Promise(async (resolve, reject) => {\n  //Detect Provider\n  const provider = await detectEthereumProvider(); //const web3 = new Web3(provider)\n\n  if (!provider) {\n    const messages = [...messages, {\n      head: \"Wallet not found\",\n      body: `Please install MetaMask!`,\n      variant: 'warning'\n    }];\n    reject({\n      message,\n      provider\n    });\n    return;\n  } else {\n    const address = await ConnectWallet();\n\n    if (address) {\n      const messages = [...messages, {\n        head: \"User Login\",\n        body: `addres: ${address}`,\n        variant: 'success'\n      }];\n    }\n\n    resolve({\n      messages,\n      provider,\n      address\n    });\n    return;\n  }\n});\n\n_c2 = SignIn;\nexport default SignIn;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ConnectWallet\");\n$RefreshReg$(_c2, \"SignIn\");","map":{"version":3,"sources":["/home/marc/eattheblocks-master/screencast/379-nft-royalties/connectButton/src/components/signin.js"],"names":["detectEthereumProvider","messages","ConnectWallet","Promise","resolve","reject","console","log","window","ethereum","enable","chainid","request","method","accounts","setIsLogged","setCurrentAccount","parseInt","err","code","setMessage","head","body","variant","error","message","SignIn","provider","address"],"mappings":"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","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\n\n\nconst messages = [];\n\n\nconst ConnectWallet = () =>\n  new Promise( async (resolve, reject) => {\n\n    console.log(\"Try Connect\");\n\n    try {\n      await window.ethereum.enable();\n\n      const chainid = await window.ethereum.request({ method: 'eth_chainId' })\n      //setCurrentChainID(() => parseInt(id, 16))\n\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      setIsLogged(true)\n      setCurrentAccount(accounts[0])\n\n      resolve(parseInt(chainid, 16));\n      return accounts[0]\n\n    } catch(err) {\n        if (err.code === 4001) {\n          // EIP-1193 userRejectedRequest error\n          // If this happens, the user rejected the connection request.\n          console.log('Please connect to MetaMask.')\n          setMessage(messages =>[...messages, {head : \"User Rejected Request\", body: 'Please connect to MetaMask.', variant: 'info'}])\n\n        } else if(err.code === -32002) {\n          console.log('Please unlock MetaMask.')\n          setMessage(messages =>[...messages, {head : \"User Request Pending\", body: 'Please unlock MetaMask and try agin.', variant: 'info'}])\n        } else {\n          console.error(err);\n          setMessage(messages =>[...messages, {head : \"Error\", body: err.message, variant: 'info'}])\n        }\n    }\n  });\n\n\nconst SignIn = () =>\n  new Promise( async (resolve, reject) => {\n    //Detect Provider\n    const provider = await detectEthereumProvider()\n    //const web3 = new Web3(provider)\n    if(!provider) {\n      const messages = [...messages,{head : \"Wallet not found\", body: `Please install MetaMask!`, variant: 'warning'}];\n      reject({message,provider});\n      return;\n    } \n    else \n    {\n      const address = await ConnectWallet()\n      if (address)\n      {\n        const messages = [...messages,{head : \"User Login\", body: `addres: ${address}`, variant: 'success'}];\n      }\n      resolve({messages,provider,address});\n      return;\n    }\n  });\n\nexport default SignIn;"]},"metadata":{},"sourceType":"module"}