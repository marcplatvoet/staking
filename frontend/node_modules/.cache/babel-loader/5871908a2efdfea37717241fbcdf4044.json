{"ast":null,"code":"import { ethers, Contract } from \"ethers\";\nimport Web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\"; // const getArtist = async (mytoken) => {\n//   return await mytoken._artist;\n// };\n\nconst getContract = async web3 => {\n  const data = await getJSON(MyToken);\n  const netId = await web3.eth.net.getId();\n  const deployedNetwork = data.networks[netId];\n  const greeting = new web3.eth.Contract(data.abi, deployedNetwork && deployedNetwork.address);\n  return greeting;\n};\n\nconst getTokenBlockchain = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    console.log(`window.ethereum: ${window.ethereum}`);\n\n    if (window.ethereum) {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // console.log(`provider: ${provider}`);\n\n      const signer = provider.getSigner(); // console.log(`signer:${signer}`);\n\n      const signerAddress = await signer.getAddress(); // console.log(`signerAddress:${signerAddress}`);\n\n      const mytoken = new Contract(MyToken.address, MyToken.abi, signer); //const balance = getBalance(mytoken, signerAddress);\n\n      const balance = await mytoken.balanceOf(signerAddress); //console.log(balance);\n\n      console.log(ethers.utils.formatEther(balance));\n      const contract = getContract(); //const artist = await mytoken.getArtist();\n      //console.log(printCoolNumber());\n      // const contract_fac = await mytoken._artist();\n      // console.log(contract_fac);\n      // const artist = getArtist(mytoken);\n      // console.log(artist);\n      // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n      resolve({\n        signerAddress,\n        mytoken\n      });\n    }\n\n    resolve({\n      signerAddress: undefined,\n      mytoken: undefined\n    });\n  });\n});\n\nexport { getTokenBlockchain };","map":{"version":3,"sources":["/home/marc/EatTheBlocks/nft-royalties/frontend/src/components/token.js"],"names":["ethers","Contract","Web3","MyToken","getContract","web3","data","getJSON","netId","eth","net","getId","deployedNetwork","networks","greeting","abi","address","getTokenBlockchain","Promise","resolve","reject","window","addEventListener","console","log","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","signerAddress","getAddress","mytoken","balance","balanceOf","utils","formatEther","contract","undefined"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,MAAOC,IAAP,IAAgB;AAClC,QAAMC,IAAI,GAAG,MAAMC,OAAO,CAACJ,OAAD,CAA1B;AAEA,QAAMK,KAAK,GAAG,MAAMH,IAAI,CAACI,GAAL,CAASC,GAAT,CAAaC,KAAb,EAApB;AACA,QAAMC,eAAe,GAAGN,IAAI,CAACO,QAAL,CAAcL,KAAd,CAAxB;AACA,QAAMM,QAAQ,GAAG,IAAIT,IAAI,CAACI,GAAL,CAASR,QAAb,CACfK,IAAI,CAACS,GADU,EAEfH,eAAe,IAAIA,eAAe,CAACI,OAFpB,CAAjB;AAIA,SAAOF,QAAP;AACD,CAVD;;AAYA,MAAMG,kBAAkB,GAAG,MACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBH,MAAM,CAACI,QAAS,EAAhD;;AACA,QAAIJ,MAAM,CAACI,QAAX,EAAqB;AACnB,YAAMJ,MAAM,CAACI,QAAP,CAAgBC,MAAhB,EAAN;AACA,YAAMC,QAAQ,GAAG,IAAI3B,MAAM,CAAC4B,SAAP,CAAiBC,YAArB,CAAkCR,MAAM,CAACI,QAAzC,CAAjB,CAFmB,CAGnB;;AACA,YAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAJmB,CAKnB;;AACA,YAAMC,aAAa,GAAG,MAAMF,MAAM,CAACG,UAAP,EAA5B,CANmB,CAOnB;;AACA,YAAMC,OAAO,GAAG,IAAIjC,QAAJ,CAAaE,OAAO,CAACa,OAArB,EAA8Bb,OAAO,CAACY,GAAtC,EAA2Ce,MAA3C,CAAhB,CARmB,CASnB;;AACA,YAAMK,OAAO,GAAG,MAAMD,OAAO,CAACE,SAAR,CAAkBJ,aAAlB,CAAtB,CAVmB,CAWnB;;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAYxB,MAAM,CAACqC,KAAP,CAAaC,WAAb,CAAyBH,OAAzB,CAAZ;AAEA,YAAMI,QAAQ,GAAGnC,WAAW,EAA5B,CAdmB,CAgBnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAe,MAAAA,OAAO,CAAC;AAAEa,QAAAA,aAAF;AAAiBE,QAAAA;AAAjB,OAAD,CAAP;AACD;;AACDf,IAAAA,OAAO,CAAC;AACNa,MAAAA,aAAa,EAAEQ,SADT;AAENN,MAAAA,OAAO,EAAEM;AAFH,KAAD,CAAP;AAID,GAhCD;AAiCD,CAlCD,CADF;;AAqCA,SAASvB,kBAAT","sourcesContent":["import { ethers, Contract } from \"ethers\";\nimport Web3 from \"web3\";\nimport MyToken from \"../contracts/MyToken.json\";\n\n// const getArtist = async (mytoken) => {\n//   return await mytoken._artist;\n// };\n\nconst getContract = async (web3) => {\n  const data = await getJSON(MyToken);\n\n  const netId = await web3.eth.net.getId();\n  const deployedNetwork = data.networks[netId];\n  const greeting = new web3.eth.Contract(\n    data.abi,\n    deployedNetwork && deployedNetwork.address\n  );\n  return greeting;\n};\n\nconst getTokenBlockchain = () =>\n  new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n      console.log(`window.ethereum: ${window.ethereum}`);\n      if (window.ethereum) {\n        await window.ethereum.enable();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        // console.log(`provider: ${provider}`);\n        const signer = provider.getSigner();\n        // console.log(`signer:${signer}`);\n        const signerAddress = await signer.getAddress();\n        // console.log(`signerAddress:${signerAddress}`);\n        const mytoken = new Contract(MyToken.address, MyToken.abi, signer);\n        //const balance = getBalance(mytoken, signerAddress);\n        const balance = await mytoken.balanceOf(signerAddress);\n        //console.log(balance);\n        console.log(ethers.utils.formatEther(balance));\n\n        const contract = getContract();\n\n        //const artist = await mytoken.getArtist();\n        //console.log(printCoolNumber());\n        // const contract_fac = await mytoken._artist();\n        // console.log(contract_fac);\n        // const artist = getArtist(mytoken);\n        // console.log(artist);\n        // console.log(`token:${token.balanceOf(signerAddress)}`);\n\n        resolve({ signerAddress, mytoken });\n      }\n      resolve({\n        signerAddress: undefined,\n        mytoken: undefined,\n      });\n    });\n  });\n\nexport { getTokenBlockchain };\n"]},"metadata":{},"sourceType":"module"}